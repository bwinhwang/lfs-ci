///////////////////////////////////////////////////////////////////////////////
//
// Groovy script to cleanup the workspace on Jenkins slaves for a given branch.
//
// On branch level, on each Jenkins slave the directory of no longer existing jobs
// will be deleted.
//
// If DEBUG is "true" nothing will be deleted. Set DEBUG="true" to
// see which directories would be deleted on which slave.
///////////////////////////////////////////////////////////////////////////////


import hudson.model.ParametersAction

def jenkins = jenkins.model.Jenkins.instance

def thr = Thread.currentThread()

def build = thr?.executable

def parameters = build?.actions.find{ it instanceof ParametersAction }?.parameters

def jobNames = null

def debug = true

def branch = ""

parameters.each {
    if(it.name == "DEBUG") {
        debug = it.value
        println("[INFO] got parameter DEBUG: $debug")
    }
    if(it.name == "BRANCH") {
        branch = it.value
        println("[INFO] got parameter BRANCH: $branch")
    }
}

if(!branch) {
    println("[ERROR] BRANCH is not specified")
    return 1
}

if(debug == true) {
    println("** Execute in DEBUG mode - nothing will be deleted **")
} 

// Jobs which don't have a custom workspace
jobNames = jenkins.items.findAll { it instanceof hudson.model.AbstractProject && it.customWorkspace == null && it.name.find(branch) }.collect { it.name }

for(slave in jenkins.slaves) {
    if(!slave.computer.online) {
        println("Slave '$slave.nodeName' is currently offline - skip workspace cleanup")
        continue
    }
    // Retrieve the FilePath to the workspace root
    def wsRoot = slave.workspaceRoot
    if(wsRoot == null) {
        printlnt("Slave '$slave.nodeName' has a <null> workspaceRoot - skip workspace cleanup")
        continue
    } 

    println("Slave '$slave.nodeName' is online - perform workspace cleanup:")

    def subdirs = wsRoot.list()
    if(subdirs.size() == 0) {
        println(" (workspace is empty)")
        continue
    } 

    for(d in subdirs) {
        // Remove any suffixes from the dir name
        def dirName = d.name.split("@")[0]
        for(jobName in jobNames) {
            if(jobName == dirName) {
                if(debug == true) {
                    println(" [DEBUG] DELETE job: $d (dryRun)")
                }
                else {
                    d.deleteRecursive()
                    println(" [INFO] DELETED job directory: $d")
                }
            }
        }
    }
}

