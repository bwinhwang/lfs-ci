#!/bin/bash

test "$RELEASEPREFIX" || RELEASEPREFIX=PS_LFS_PKG
test "$SVNTAGDIR" || SVNTAGDIR="
	https://svne1.access.nokiasiemensnetworks.com/isource/svnroot/BTS_SC_LFS/os/trunk/main/src-project
    file:///build/home/foobar/
	"
# test "$SVNKERNELDIR" || SVNKERNELDIR=https://svne1.access.nokiasiemensnetworks.com/isource/svnroot/BTS_SC_LFS/os/trunk/main/src-kernelsources

test "$SVNTAGDIR" = NONE && SVNTAGDIR=

set -eu

local RELEASEPREFIX=$(getConfig LFS_PROD_uc_pkgpool_release_prefix)
mustHaveValue "${RELEASEPREFIX}" "release prefix"

local SVNTAGDIR=$(getConfig LFS_PROD_uc_pkgpool_svn_tag_directories)
mustHaveValue "${SVNTAGDIR}" "svn tag diretories"

_buildPkgpool
_createTagInGit
_createRelease
_updateDependencies

sub _buildPkgpool() {
    requiredParameters WORKSPACE

    execute rm -rf ${WORKSPACE}/bld
    execute mkdir ${WORKSPACE}/bld
    execute cd ${WORKSPACE}/src
    execute rm -rf src
    execute git reset --hard                                                                                   
    execute ./bootstrap                                                                               
    execute cd ../bld                                                         
    execute -n ../src/build --prepopulate --release="$RELEASEPREFIX" > ../buildlog
    RELSTR="$(sed -ne 's,^release \([^ ]*\) complete$,\1,p' ../buildlog)"
    if test -z "$RELSTR"; then
        for log in logs/*.log ; do
            [[ -e ${log} ]] || continue
            rawOutput ${log}
        done
        fatal "release complate not found in logfile"
    fi
    execute touch /build/home/SC_LFS/pkgpool/.hashpool

    setBuildDescription "${JOB_NAME}" "${BUILD_NUMBER}" "${RELSTR}"

    return
}


sub _createTagInGit() {
    requiredParameters WORKSPACE

    cd ${WORKSPACE}/src

    DATETIME=$(date -u +'%F/%T')
    BASED_ON=$(git describe --abbrev=0)

    execute git tag -a -m $RELSTR $RELSTR
    execute git push origin $RELSTR

    return
}

sub _createRelease() {
cat > relnote.xml <<EOT
<releasenote version="9">
  <name>$RELSTR</name>
  <system>PS_LFS</system>
  <releaseDate>${DATETIME/\/*}</releaseDate>
  <releaseTime>${DATETIME/*\/}Z</releaseTime>
  <authorEmail>robert.schiele@nsn.com</authorEmail>
  <basedOn>$BASED_ON</basedOn>
  <branchFor><branch>PS_Basic</branch></branchFor>
  <importantNotes>
    <note name="PS_LFS_PKG">
    </note>
  </importantNotes>
  <repositoryUrl>/build/home/SC_LFS/pkgpool</repositoryUrl>
  <repositoryBranch></repositoryBranch>
  <repositoryRevision>$RELSTR</repositoryRevision>
  <correctedFaults>
    <module name="$RELSTR">
    </module>
  </correctedFaults>
  <baselines>
EOT

sed -ne 's|^src [^ ]* \(.*\)$|<baseline name="PS_LFS_PKG" auto_create="true">\1</baseline>|p' bld/pool/*.meta |
sort -u >> relnote.xml

cat >> relnote.xml <<EOT
  </baselines>
  <download>
    <downloadItem storage="FILE" name="SC_LFS">/build/home/SC_LFS/pkgpool/$RELSTR</downloadItem>
  </download>
  <features>
  </features>
</releasenote>
EOT

curl -k https://wft.inside.nsn.com/ext/api/xml -F "access_key=lL0CWZcUtyAFu7yRhmStEhTlJOd7LLbReA5RcGo4" -F "file=@relnote.xml"
}
sub _updateDependencies() {
    for ONESVNTAGDIR in $SVNTAGDIR; do
        SVNDIR=${ONESVNTAGDIR//[\/:]/_}
        GITREVISION=src/gitrevision
        case "$ONESVNTAGDIR" in
            */src-rfs)
            RELFILE=Buildfile
            ;;
            */src-project)
            RELFILE=Dependencies
            ;;
            *)
            echo "SVNTAGDIR incorrect: $ONESVNTAGDIR"
            break
            ;;
        esac
        test -d $SVNDIR || svn co "$ONESVNTAGDIR" $SVNDIR
        cd $SVNDIR
        svn up
        COMMITBEFORE=$(cat $GITREVISION)
        cd ../src
        git rev-parse HEAD > ../$SVNDIR/$GITREVISION
        COMMITAFTER=$(cat ../$SVNDIR/$GITREVISION)
        git log $COMMITBEFORE..$COMMITAFTER | sed -e 's,^    %,%,' > ../$SVNDIR/gitlog
        cd ../$SVNDIR
        sed -i -e "
        s|^PKGLABEL *?=.*|PKGLABEL ?= $RELSTR|
        s|^LRCPKGLABEL *?=.*|LRCPKGLABEL ?= $RELSTR|
        s|^hint *bld/pkgpool .*|hint bld/pkgpool $RELSTR|
        " $RELFILE
        if ! svn commit -F gitlog $RELFILE $GITREVISION 2> stderr; then
            java -jar "$JENKINS_ROOT/jenkins-cli.jar" set-build-result unstable
            NUM=$(sed -ne 's,^Error in line \([0-9]\+\) : .*,\1,p' stderr)
            if test -z "$NUM"; then
            cd ..
            echo "SVN rejected our commit message for a reason we didn't understand:"
            echo
            cat stderr
            break
            fi
            for ANUM in $NUM; do
            sed -i -e "$ANUM{s,%,o/o,g;s,^,SVN REJECTED: ,}" gitlog
            done
            echo "SVN rejected some of your commit notes for the release notes."
            echo "If you need them in the release note please do another commit"
            echo "with corrected syntax:"
            echo
            cat stderr
            echo
            echo "We try to submit now:"
            echo
            cat gitlog
            svn commit -F gitlog $RELFILE $GITREVISION
        fi
        cd ..
    done
}
exit 0
