///////////////////////////////////////////////////////////////////////////////
//
// Groovy script to crate a new branch in the LFS CI.
//
// 1. Take environment vars and parameters from Jenkins job.
// 2. Creagte a list view and name it after the new branch.
// 3. Add this new list view to the SCM view.
// 4. Copy the jobs and replace $src_branch with $new_branch
//    in the job name.
// 5. On the new job update the custom workspace if existing.
// 6. Reconfigure the new job by editing config.xml.
// 7. Copy and configure promotions if there are any.
// 8. Reload the configuration of the new job.
//
// IMPORTANT:
// 1)
// Jobs to be copied must exist within the SCM view of the
// source branch as for example "SCM/tunk".
// 2)
// Currently works only if "trunk" is the src_branch.
///////////////////////////////////////////////////////////////////////////////

import hudson.model.*
import jenkins.model.Jenkins
import hudson.model.ParametersAction
import hudson.model.ListView
import hudson.plugins.sectioned_view.SectionedView
import javax.xml.transform.stream.StreamSource
import java.io.File
import java.io.FileInputStream;


println("\n\nGROOVY SCRIPT")

def env = System.getenv()

jenkinsHome = env['JENKINS_HOME']

def j = Jenkins.instance

def thr = Thread.currentThread()

def build = thr?.executable

src_branch = ""

new_branch = ""
  
comment = ""

copy_jobs = false

fsmr4_jobs = false

// Environment vars
lrc_jobs = false
if(build.getEnvironment(listener).get("LRC") == "true") {
    lrc_jobs = true
}

// Parameters from Jenkins job
def parameters = build?.actions.find{ it instanceof ParametersAction }?.parameters
parameters.each {
    if(it.name == "NEW_BRANCH")
        new_branch = it.value
    else if(it.name == "SRC_BRANCH")
        src_branch = it.value
    else if(it.name == "FSMR4")
        fsmr4_jobs = it.value
    else if(it.name == "COMMENT")
        comment = it.value
    else if(it.name == "DO_JENKINS" && it.value == false) {
        println("DO_JENKINS: false - nothing to do.")
        return 0
    }
}

if(!new_branch || !src_branch || !comment) {
    throw new RuntimeException("Parameter is missing")
}
if(src_branch != "trunk") {
    throw new RuntimeException("Parameter SRC_BRANCH must be \"trunk\"")
}

println("[INFO] lrc_jobs: $lrc_jobs")
println("[INFO] fsmr4_jobs: $fsmr4_jobs")


// Add branch list view to SCM view.
def createScmView() {
    def scm_view = "SCM"
    def scm_view_obj = Jenkins.instance.getView(scm_view)
    def new_branch_view_obj = null
    src_branch_view_obj = scm_view_obj.getView(src_branch.toUpperCase())
    new_branch_view_obj = scm_view_obj.getView(new_branch)
    if(new_branch_view_obj) {
        println("[INFO] view $new_branch already exists.")
    }
    else {
        new_branch_view_obj = new ListView(new_branch, scm_view_obj)
        scm_view_obj.addView(new_branch_view_obj)
        println("[INFO] Added view $new_branch to $scm_view view")
    }
    return new_branch_view_obj
}

// Create sectioned view in the "Jenkins root".
def createSectionedView() {
    def new_branch_section_view = new_branch[2..-1]
    def trunk_view = "trunk"
    def new_branch_section_view_obj = Jenkins.instance.getView(new_branch_section_view)
    //def list_view_section_obj = null
    if(new_branch_section_view_obj) {
        println("[INFO] view $new_branch_section_view already exists.")
    } else {
        // Create a "section view" for the new branch
        trunk_view_owner_obj = Jenkins.instance.getView(trunk_view).getOwner();
        new_branch_section_view_obj = new SectionedView(new_branch_section_view)
        trunk_view_owner_obj.addView(new_branch_section_view_obj)
        println("[INFO] Created view $new_branch_section_view")
    }
}

def processFileInplace(file, Closure processText) {
    def text = file.text
    file.write(processText(text))
}

jobs_to_enable = []
def copyJob(job) {
    def new_name = ""
    def new_job = null
    if(job.getName().find("fsmr4") && fsmr4_jobs) {
        new_name = job.getName().replaceFirst("-_fsmr4_-", "-_"+new_branch+"_FSMR4_-")
        new_job = Jenkins.instance.copy(job, new_name)
        new_job.setDisplayName(job.getDisplayName().replaceFirst("- "+src_branch+" -", "- "+new_branch+" -"))
    } else if(job.getName().find("LRC") && lrc_jobs) {
        new_name = job.getName().replaceFirst("-_LRC_-", "-_LRC_"+new_branch+"_-")
        new_job = Jenkins.instance.copy(job, new_name)
        if(job.getDisplayName().startsWith("LFS CI - LRC "+src_branch+" -")) {
            new_job.setDisplayName(job.getDisplayName().replaceFirst("- LRC "+src_branch+" -", "- LRC "+new_branch+" -"))
        } else if(job.getDisplayName().startsWith("LFS Production - LRC - ")) {
            new_job.setDisplayName(job.getDisplayName().replaceFirst("- LRC -", "- LRC "+new_branch+" -"))
        }
    } else if(!lrc_jobs) {
        new_name = job.getName().replaceFirst("-_"+src_branch+"_-", "-_"+new_branch+"_-")
        new_job = Jenkins.instance.copy(job, new_name)
        new_job.setDisplayName(job.getDisplayName().replaceFirst(src_branch, new_branch))
    }
    if(new_name == "LFS_CI_-_${new_branch}_-_Build" || new_name == "LFS_CI_-_LRC_${new_branch}_-_Build") {
        new_job.setDescription("Comment: ${comment}")
        println("[INFO] set description for job \"$new_name\"")
        // disable root jobs because not all jobs are created jet.
        new_job.disable()
        println("[INFO] disabled job \"$new_job.name\"")
        jobs_to_enable.add(new_job)
    }
    println("[INFO] copied job \"$job.name\" -> \"$new_name\"")
    return new_job
}

def disableJob(job) {
    if(job.getName().find("ECL")) {
        println("[INFO] Disable job $job.name")
        job.disable()
    }
}

def updateWorkspace(job) {
    AbstractProject project = job
    def new_workspace = project.getCustomWorkspace()
    if(new_workspace) {
        new_workspace.replace(src_branch, new_branch)
        project.setCustomWorkspace(new_workspace)
        project.save()
    }
}

def updateJobConfig(job, new_job) {
    def configXMLFile = new_job.getConfigFile();
    def config_file = configXMLFile.getFile();
    if(job.getName().find("fsmr4") && fsmr4_jobs) {
        processFileInplace(config_file) { text ->
            text.replaceAll("-_fsmr4_-", "-_"+new_branch+"_FSMR4_-")
        }
    } else if(job.getName().find("LRC") && lrc_jobs) {
        processFileInplace(config_file) { text ->
            text.replaceAll("LFS_CI_-_LRC_-", "LFS_CI_-_LRC_"+new_branch+"_-")
        }
        processFileInplace(config_file) { text ->
            text.replaceAll("LFS_Prod_-_LRC_-", "LFS_Prod_-_LRC_"+new_branch+"_-")
        }
    } else if(!lrc_jobs) {
        processFileInplace(config_file) { text ->
            text.replaceAll("-_"+src_branch+"_-", "-_"+new_branch+"_-")
        }
        if(new_job.getName().find("LFS_CI_-_"+new_branch+"_-_Build")) {
            processFileInplace(config_file) { text ->
                text.replaceAll("LFS_CI_-_fsmr4_", "LFS_CI_-_"+new_branch+"_FSMR4_")
            }
        }
    }
    println("[INFO] updated job configuration for job \"$new_job.name\"")
    return config_file
}

def reloadJobConfig(job, config_file) {
    InputStream is = new FileInputStream(config_file);
    job.updateByXml(new StreamSource(is));
    job.save();
    println("[INFO] reloaded config for job \"$job.name\"")
}

def copyPromotions(job, new_job) {
    def promoSrcDir = new File("${jenkinsHome}/jobs/${job.name}/promotions")
    def promoDstDir = new File("${jenkinsHome}/jobs/${new_job.name}/promotions")
    for(property in job.getAllProperties()) {
        if(property.getClass() == hudson.plugins.promoted_builds.JobPropertyImpl) {
            println("[INFO] Job \"$job.name\" has promotions.")
            for(action in property.getJobActions())  {
                for(process in action.getProcesses()) {
                    if(process.getClass() == hudson.plugins.promoted_builds.PromotionProcess) {
                        new File(promoDstDir.getAbsolutePath()+"/"+process.getName()).mkdirs()
                        builder = new AntBuilder()
                        builder.sequential {
                            copy(tofile: promoDstDir.getAbsolutePath()+"/"+process.getName()+"/config.xml",
                                 file:   promoSrcDir.getAbsolutePath()+"/"+process.getName()+"/config.xml",
                                 overwrite: true)
                        } 
                        def dstFile = new File(promoDstDir.getAbsolutePath()+"/"+process.getName()+"/config.xml")
                        println("[INFO] configuring file "+dstFile.getAbsolutePath())
                        if(job.getName().find("fsmr4") && fsmr4_jobs) {
                            processFileInplace(dstFile) { text ->
                                text.replaceAll("-_"+src_branch+"_-", "-_"+new_branch+"_-")
                            }
                        } else if(job.getName().find("LRC") && lrc_jobs) {
                            processFileInplace(dstFile) { text ->
                                text.replaceAll("LFS_CI_-_LRC_-", "LFS_CI_-_LRC_"+new_branch+"_-")
                            }
                        } else if(!lrc_jobs) {
                            processFileInplace(dstFile) { text ->
                                text.replaceAll("-_"+src_branch+"_-", "-_"+new_branch+"_-")
                            }
                        }
                    }
                }
            }
        }
    }
}

void configureSectionedView() {

    def new_branch_section_view = new_branch[2..-1]
    def name_section_testing = "CI Builds and Testing (${new_branch})"
    def name_section_releasing = "Releasing (${new_branch})"
    def jenkinsUrl = "http://ulegcpeag15:8090/view/${new_branch_section_view}/config.xml"

    def config_xml = """<hudson.plugins.sectioned__view.SectionedView plugin="sectioned-view@1.18"><name>${new_branch_section_view}</name><filterExecutors>false</filterExecutors><filterQueue>false</filterQueue><properties class="hudson.model.View\$PropertyList"/><sections><hudson.plugins.sectioned__view.ListViewSection><jobNames><comparator class="hudson.util.CaseInsensitiveComparator"/></jobNames><jobFilters/><name>${name_section_testing}</name><includeRegex>LFS_CI_-_${new_branch}.*</includeRegex><width>HALF</width><alignment>LEFT</alignment><columns><hudson.views.StatusColumn/><hudson.views.WeatherColumn/><hudson.views.JobColumn/><hudson.views.LastSuccessColumn/><hudson.views.LastFailureColumn/><hudson.views.LastDurationColumn/><hudson.views.BuildButtonColumn/></columns></hudson.plugins.sectioned__view.ListViewSection><hudson.plugins.sectioned__view.ListViewSection><jobNames><comparator class="hudson.util.CaseInsensitiveComparator"/></jobNames><jobFilters/><name>${name_section_releasing}</name><includeRegex>LFS_Prod_-_${new_branch}_-_.*</includeRegex><width>HALF</width><alignment>LEFT</alignment><columns><hudson.views.StatusColumn/><hudson.views.WeatherColumn/><hudson.views.JobColumn/><hudson.views.LastSuccessColumn/><hudson.views.LastFailureColumn/><hudson.views.LastDurationColumn/><hudson.views.BuildButtonColumn/></columns></hudson.plugins.sectioned__view.ListViewSection></sections></hudson.plugins.sectioned__view.SectionedView>"""

    def configurationFile = new File("config.xml")
    configurationFile.write(config_xml)

    def proc = ['curl', "-ueambrosc:c83b379dc70aa8aca6980666e11f941e", "${jenkinsUrl}", "--data-binary", "@config.xml"].execute()
    proc.waitFor()
}

///////////////////////////////////////////////////////////////////////
//
// HERE WE GO
//
///////////////////////////////////////////////////////////////////////

new_branch_view_obj = createScmView()

// collect jobs to be created
def jobs_list = []
for(job in src_branch_view_obj.getItems()) {
    if(job.getName().find(src_branch) && !lrc_jobs) {
        jobs_list.add(job)
    } else if(fsmr4_jobs && job.getName().find("fsmr4")) {
        jobs_list.add(job)
    } else if(lrc_jobs && job.getName().find("LRC")) {
        jobs_list.add(job)
    }
}

for(job in jobs_list) {
    //if(job.name == "LFS_CI_-_${src_branch}_-_Build") {
    //if(job.name == "LFS_CI_-_${src_branch}_-_Test") {
    //if(job.name.find("LRC")) {
    //if(job.name.find("fsmr4")) {
    def new_job = copyJob(job)
    new_job.save()
    disableJob(new_job)
    // avoid having two projects point to the same location
    updateWorkspace(new_job)
    def config_file = updateJobConfig(job, new_job)
    copyPromotions(job, new_job)
    reloadJobConfig(new_job, config_file)
    new_branch_view_obj.doAddJobToView(new_job.getName())
    println("[INFO] added job $new_job.name to view \"$new_branch_view_obj.name\"")
    //}
}

// enable previosly disabled jobs
for(disabled_job in jobs_to_enable) {
    disabled_job.enable()
    println("[INFO] enabled job \"$disabled_job.name\"")
}

createSectionedView()
configureSectionedView()

