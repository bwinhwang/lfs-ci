///////////////////////////////////////////////////////////////////////////////
//
// Groovy script to crate a new branch in the LFS CI.
//
// 1. Take environment vars and parameters from Jenkins job.
// 2. Creagte a list view and name it after the new branch.
// 3. Add this new list view to the SCM view.
// 4. Copy the jobs and replace $src_branch with $new_branch
//    in the job name.
// 5. On the new job update the custom workspace if existing.
// 6. Reconfigure the new job by editing config.xml.
// 7. Copy and configure promotions if there are any.
// 8. Reload the configuration of the new job.
//
////////////////////////////////////////////////////////////////////////////////
//
// IMPORTANT:
//
// 1)
// Jobs to be copied must exist within the SCM view.
// "SCM/TUNK" and "SCM_LRC/TRUNK".
// 2)
// Currently works only if "trunk" is the src_branch.
///////////////////////////////////////////////////////////////////////////////

import hudson.model.*
import jenkins.model.Jenkins
import hudson.model.ParametersAction
import hudson.model.ListView
import hudson.plugins.sectioned_view.SectionedView
import javax.xml.transform.stream.StreamSource
import java.io.File
import java.io.FileInputStream;


println("\nRunning script createBranch.gry\n")

def j = Jenkins.instance

def thr = Thread.currentThread()

def build = thr?.executable

src_branch = ""

new_branch = ""
  
comment = ""

copy_jobs = false

fsmr4_jobs = false

fsmr4_only = false

doJenkins = false

activateRootJobs = false

debug = true

// Environment vars
jenkinsHome = build.getEnvironment(listener).get("JENKINS_HOME")

jenkinsUrl = build.getEnvironment(listener).get("JENKINS_URL")

apiToken = build.getEnvironment(listener).get("JENKINS_API_TOKEN")

apiUser = build.getEnvironment(listener).get("JENKINS_API_USER")

lrc_jobs = false
if(build.getEnvironment(listener).get("LRC") == "true") {
    lrc_jobs = true
}


// Parameters from Jenkins job
def parameters = build?.actions.find{ it instanceof ParametersAction }?.parameters
parameters.each {
    if(it.name == "NEW_BRANCH")
        new_branch = it.value
    else if(it.name == "SRC_BRANCH")
        src_branch = it.value
    else if(it.name == "FSMR4")
        fsmr4_jobs = it.value
    else if(it.name == "FSMR4_ONLY") {
        fsmr4_only = it.value
        if(fsmr4_only == true) {
            fsmr4_jobs = false
            println("[INFO] set fsmr4_jobs to false because fsmr4_only is requested.")
        }
    }
    else if(it.name == "COMMENT")
        comment = it.value
    else if(it.name == "ACTIVE_ROOT_JOBS")
        activateRootJobs = it.value
    else if(it.name == "DO_JENKINS") {
        doJenkins = it.value
    }
    else if(it.name == "DEBUG") {
        debug = it.value
        println("[INFO] got parameter DEBUG: $debug")
    }
}

if(doJenkins == false) {
    println("[INFO] DO_JENKINS: false - nothing to do.")
    return 0
}

if(!new_branch || !src_branch || !comment) {
    throw new RuntimeException("Parameter is missing")
}
if(src_branch != "trunk") {
    throw new RuntimeException("Parameter SRC_BRANCH must be \"trunk\"")
}

println("[INFO] lrc_jobs: $lrc_jobs")
println("[INFO] fsmr4_jobs: $fsmr4_jobs")
println("[INFO] fsmr4_only: $fsmr4_only")


// Add branch list view to SCM view.
def createScmView() {
    def scm_view = "SCM"
    def scm_view_obj = null
    def branch_view_name = new_branch
    def new_branch_view_obj = null

    if(lrc_jobs) {
        scm_view = "SCM_LRC"
        branch_view_name = "LRC_" + new_branch
    }

    scm_view_obj = Jenkins.instance.getView(scm_view)

    src_branch_view_obj = scm_view_obj.getView(src_branch.toUpperCase())
    new_branch_view_obj = scm_view_obj.getView(branch_view_name)

    if(new_branch_view_obj) {
        println("[INFO] view $branch_view_name already exists.")
    }
    else {
        if(debug) {
            println("[DEBUG] Adding view $branch_view_name to $scm_view view")
        } else {
            println("[INFO] Adding view $branch_view_name to $scm_view view")
            new_branch_view_obj = new ListView(branch_view_name, scm_view_obj)
            scm_view_obj.addView(new_branch_view_obj)
        }
    }

    return new_branch_view_obj
}

def processFileInplace(file, Closure processText) {
    def text = file.text
    file.write(processText(text))
}

jobs_to_enable = []
def copyJob(job) {
    def new_name = ""
    def new_job = null
    if(!debug) {
        if(job.getName().find("fsmr4") && (fsmr4_jobs || fsmr4_only)) {
            new_name = job.getName().replaceFirst("-_fsmr4_-", "-_"+new_branch+"_FSMR4_-")
            new_job = Jenkins.instance.copy(job, new_name)
            new_job.setDisplayName(job.getDisplayName().replaceFirst("- "+src_branch+" -", "- "+new_branch+" -"))
        } else if(job.getName().find("LRC") && lrc_jobs) {
            new_name = job.getName().replaceFirst("-_LRC_-", "-_LRC_"+new_branch+"_-")
            new_job = Jenkins.instance.copy(job, new_name)
            if(job.getDisplayName().startsWith("LFS CI - LRC "+src_branch+" -")) {
                new_job.setDisplayName(job.getDisplayName().replaceFirst("- LRC "+src_branch+" -", "- LRC "+new_branch+" -"))
            } else if(job.getDisplayName().startsWith("LFS Production - LRC - ")) {
                new_job.setDisplayName(job.getDisplayName().replaceFirst("- LRC -", "- LRC "+new_branch+" -"))
            }
        } else if(!lrc_jobs) {
            new_name = job.getName().replaceFirst("-_"+src_branch+"_-", "-_"+new_branch+"_-")
            new_job = Jenkins.instance.copy(job, new_name)
            new_job.setDisplayName(job.getDisplayName().replaceFirst(src_branch, new_branch))
        }
        if(new_name == "LFS_CI_-_${new_branch}_-_Build" || new_name == "LFS_CI_-_LRC_${new_branch}_-_Build" || new_name == "PKGPOOL_-_${new_branch}_-_Build" || new_name == "PKGPOOL_-_LRC_${new_branch}_-_Build") {
            new_job.setDescription("Comment: ${comment}")
            println("[INFO] set description for job \"$new_name\"")
            // disable build jobs because not all jobs are created jet.
            new_job.disable()
            println("[INFO] disabled job \"$new_job.name\"")
            jobs_to_enable.add(new_job)
        }
        println("[INFO] copied job \"$job.name\" -> \"$new_name\"")
        return new_job
    } else {
        println("[DEBUG] copy job \"$job.name\"")
    }
}

def disableJob(job) {
    if(job.getName().find("ECL")) {
        println("[INFO] Disable job $job.name")
        job.disable()
    }
}

def updateWorkspace(job) {
    AbstractProject project = job
    def new_workspace = project.getCustomWorkspace()
    if(new_workspace) {
        new_workspace.replace(src_branch, new_branch)
        project.setCustomWorkspace(new_workspace)
        project.save()
    }
}

def updateJobConfig(job, new_job) {
    def configXMLFile = new_job.getConfigFile();
    def config_file = configXMLFile.getFile();
    if(job.getName().find("fsmr4") && (fsmr4_jobs || fsmr4_only)) {
        processFileInplace(config_file) { text ->
            text.replaceAll("-_fsmr4_-", "-_"+new_branch+"_FSMR4_-")
        }
    } else if(job.getName().find("LRC") && lrc_jobs) {
        processFileInplace(config_file) { text ->
            text.replaceAll("LFS_CI_-_LRC_-", "LFS_CI_-_LRC_"+new_branch+"_-")
        }
        processFileInplace(config_file) { text ->
            text.replaceAll("LFS_Prod_-_LRC_-", "LFS_Prod_-_LRC_"+new_branch+"_-")
        }
        processFileInplace(config_file) { text ->
            text.replaceAll("PKGPOOL_-_LRC_-", "PKGPOOL_-_LRC_"+new_branch+"_-")
        }
    } else if(!lrc_jobs) {
        processFileInplace(config_file) { text ->
            text.replaceAll("-_"+src_branch+"_-", "-_"+new_branch+"_-")
        }
        if(new_job.getName().find("LFS_CI_-_"+new_branch+"_-_Build")) {
            processFileInplace(config_file) { text ->
                text.replaceAll("LFS_CI_-_fsmr4_", "LFS_CI_-_"+new_branch+"_FSMR4_")
            }
        }
    }

    if(new_job.getName() == "PKGPOOL_-_"+new_branch+"_-_Build") {
        if (src_branch == "trunk") {
            processFileInplace(config_file) { text ->
                text.replace("*/master", "*/"+new_branch)
            }
        } else {
            processFileInplace(config_file) { text ->
                text.replace("*/${src_branch}", "*/"+new_branch)
            }
        }
    }

    println("[INFO] updated job configuration for job \"$new_job.name\"")
    return config_file
}

def reloadJobConfig(job, config_file) {
    InputStream is = new FileInputStream(config_file);
    job.updateByXml(new StreamSource(is));
    job.save();
    println("[INFO] reloaded config for job \"$job.name\"")
}

def copyPromotions(job, new_job) {
    def promoSrcDir = new File("${jenkinsHome}/jobs/${job.name}/promotions")
    def promoDstDir = new File("${jenkinsHome}/jobs/${new_job.name}/promotions")
    for(property in job.getAllProperties()) {
        if(property.getClass() == hudson.plugins.promoted_builds.JobPropertyImpl) {
            println("[INFO] Job \"$job.name\" has promotions.")
            for(action in property.getJobActions())  {
                for(process in action.getProcesses()) {
                    if(process.getClass() == hudson.plugins.promoted_builds.PromotionProcess) {
                        new File(promoDstDir.getAbsolutePath()+"/"+process.getName()).mkdirs()
                        builder = new AntBuilder()
                        builder.sequential {
                            copy(tofile: promoDstDir.getAbsolutePath()+"/"+process.getName()+"/config.xml",
                                 file:   promoSrcDir.getAbsolutePath()+"/"+process.getName()+"/config.xml",
                                 overwrite: true)
                        } 
                        def dstFile = new File(promoDstDir.getAbsolutePath()+"/"+process.getName()+"/config.xml")
                        println("[INFO] configuring file "+dstFile.getAbsolutePath())
                        if(job.getName().find("fsmr4") && (fsmr4_jobs|| fsmr4_only)) {
                            processFileInplace(dstFile) { text ->
                                text.replaceAll("-_"+src_branch+"_-", "-_"+new_branch+"_-")
                            }
                        } else if(job.getName().find("LRC") && lrc_jobs) {
                            processFileInplace(dstFile) { text ->
                                text.replaceAll("LFS_CI_-_LRC_-", "LFS_CI_-_LRC_"+new_branch+"_-")
                            }
                        } else if(!lrc_jobs) {
                            processFileInplace(dstFile) { text ->
                                text.replaceAll("-_"+src_branch+"_-", "-_"+new_branch+"_-")
                            }
                        }
                    }
                }
            }
        }
    }
}

///////////////////////////////////////////////////////////////////////
//
// HERE WE GO
//
///////////////////////////////////////////////////////////////////////

try {
    new_branch_view_obj = createScmView()
}
catch(NullPointerException) {
    println("[INFO] NullPointerException OK in case DEBUG == true")
}

// collect jobs to be created
def jobs_list = []
for(job in src_branch_view_obj.getItems()) {
    if(job.getName().find(src_branch) && !lrc_jobs) {
        // fsm is requested
        jobs_list.add(job)
    } else if(fsmr4_jobs && !fsmr4_only && job.getName().find("fsmr4")) {
        // fsmr4 is also requested
        jobs_list.add(job)
    } else if(fsmr4_only && !job.getName().find("FSM-r2") && !job.getName().find("FSM-r3")) {
        // only fsmr4 is requested (fsm jobs are not needed)
        jobs_list.add(job)
    } else if(lrc_jobs && job.getName().find("LRC")) {
        // LRC is requested
        jobs_list.add(job)
    }
}

for(job in jobs_list) {
    //if(job.name == "LFS_CI_-_${src_branch}_-_Build") {
    //if(job.name == "LFS_CI_-_${src_branch}_-_Test" || job.name == "LFS_Prod_-_trunk_-_Releasing_-_summary" || job.name == "LFS_CI_-_LRC_-_Build" || job.name == "LFS_Prod_-_LRC_-_Releasing_-_summary") {
    //if(job.name == "LFS_CI_-_${src_branch}_-_Build" || job.name == "LFS_CI_-_${src_branch}_-_Test" || job.name == "LFS_Prod_-_trunk_-_Releasing_-_summary") {
    //if(job.name == "LFS_CI_-_${src_branch}_-_Build" || job.name == "LFS_CI_-_${src_branch}_-_Test" || job.name == "LFS_Prod_-_trunk_-_Releasing_-_summary" || job.name.find("fsmr4")) {
    //if(job.name.find("LRC")) {
    //if(job.name.find("fsmr4")) {
    //if(job.name == "PKGPOOL_-_trunk_-_Build") {
    def new_job = copyJob(job)
    if(!debug) {
        new_job.save()
        disableJob(new_job)
        // avoid having two projects point to the same location
        updateWorkspace(new_job)
        def config_file = updateJobConfig(job, new_job)
        copyPromotions(job, new_job)
        reloadJobConfig(new_job, config_file)
        new_branch_view_obj.doAddJobToView(new_job.getName())
        println("[INFO] added job $new_job.name to view \"$new_branch_view_obj.name\"")
    }
    //}
}

// enable previosly disabled jobs
if(activateRootJobs) {
    for(disabled_job in jobs_to_enable) {
        if(debug) {
            println("[DEBUG] enable job \"$disabled_job.name\"")
        } else {
            println("[INFO] enable job \"$disabled_job.name\"")
            disabled_job.enable()
        }
    }
} else {
    println("[INFO] not enabling before disabled jobs")
}


def config = new HashMap()
def bindings = getBinding()
config.putAll(bindings.getVariables())
def out = config['out']

sectionedView = new MySectionedView(new_branch, lrc_jobs, jenkinsUrl, apiToken, apiUser, out)
if(!debug) {
    sectionedView.createSectionedView()
    sectionedView.addListViewSections()
}


///////////////////////////////////////////////////////////////////////
//
// CLASSES
//
// In groovy the output stream must be provided to a class
// explicitly. Here we call it out.
///////////////////////////////////////////////////////////////////////


/**
 * Class that can create a sectioned view and add list view sections 
 * to it.
 */
class MySectionedView {

    def branch
    def lrc
    def regExLfsCiBuild
    def regExLfsCiTesting
    def regExLfsProd
    def nameSectionBuild
    def nameSectionTesting
    def nameSectionReleasing
    def branchSectionedView
    def listWidth
    def listAlignment
    def jenkinsUrl
    def apiToken
    def apiUser
    def out

    /**
     * Constructor
     *
     * @param branch Name of the branch (eg. FB1408).
     * @param lrc true in case of LRC false otherwise.
     * @param jenkinsUrl the Jenkins URL (eg. http://jenkins-server:8090/).
     * @param apiToken the Jenkins API token.
     * @param apiUser the Jenkins API user.
     * @param out the output stream so that this.out.println("...") works.
     */
    MySectionedView(branch, lrc, jenkinsUrl, apiToken, apiUser, out) {
        this.branch = branch
        this.lrc = lrc
        this.jenkinsUrl = jenkinsUrl
        this.apiToken = apiToken
        this.apiUser = apiUser
        this.out = out

        this.regExLfsCiBuild = "LFS_CI_-_(${this.branch}|${this.branch}_FSMR4)_-_(Build|KlocworkBuild).*"
        this.regExLfsCiTesting = "LFS_CI_-_(${this.branch}|${this.branch}_FSMR4)_-_.*(Test|Unittest).*"
        this.regExLfsProd = "LFS_Prod_-_${this.branch}_-_.*"
        this.nameSectionBuild = "CI Builds (${this.branch})"
        this.nameSectionTesting = "CI Testing (${this.branch})"
        this.nameSectionReleasing = "Releasing (${this.branch})"
        if(this.branch[0..1] == "FB")
            this.branchSectionedView = this.branch[2..-1]
        else
            this.branchSectionedView = this.branch[3..-1]
        this.listWidth = "HALF"
        this.listAlignment = "LEFT"
        if(this.lrc) {
            this.listAlignment = "RIGHT"
            this.regExLfsCiBuild = "LFS_CI_-_LRC_${this.branch}.*"
            this.regExLfsProd = "LFS_Prod_-_LRC_${this.branch}_-_.*"
            this.nameSectionBuild = "CI Builds and Testing (LRC_${this.branch})"
            this.nameSectionReleasing = "Releasing (LRC_${this.branch})"
        }
    }   
    
    /**
     * @return String the config.xml for the sectioned view.
     */
    String getCurrentXml() {
        def requestUrl = "${this.jenkinsUrl}view/${this.branchSectionedView}/config.xml"
        this.out.println("==> $requestUrl")
        def proc = ["curl", "--noproxy", "localhost", "${requestUrl}"].execute()
        def xmlString = proc.text
        return xmlString
    }

    String createListViewSectionsXml() {
        def xs = """
            <hudson.plugins.sectioned__view.ListViewSection>
              <jobNames><comparator class="hudson.util.CaseInsensitiveComparator"/></jobNames>
              <jobFilters/>
              <name>${this.nameSectionBuild}</name>
              <includeRegex>${this.regExLfsCiBuild}</includeRegex>
              <width>${listWidth}</width>
              <alignment>${this.listAlignment}</alignment>
              <columns>
                <hudson.views.StatusColumn/>
                <hudson.views.WeatherColumn/>
                <hudson.views.BuildButtonColumn/>
                <org.jenkins.ci.plugins.column.console.LastBuildColumn plugin="console-column-plugin@1.5"/>
                <com.robestone.hudson.compactcolumns.JobNameColorColumn plugin="compact-columns@1.10">
                  <colorblindHint>nohint</colorblindHint>
                  <showColor>false</showColor>
                  <showDescription>true</showDescription>
                  <showLastBuild>true</showLastBuild>
                </com.robestone.hudson.compactcolumns.JobNameColorColumn>
                <com.robestone.hudson.compactcolumns.LastStableAndUnstableColumn plugin="compact-columns@1.10">
                  <timeAgoTypeString>DIFF</timeAgoTypeString>
                </com.robestone.hudson.compactcolumns.LastStableAndUnstableColumn>
              </columns>
            </hudson.plugins.sectioned__view.ListViewSection>"""

        // LRC list view section does not separate build and test jobs
        if(!this.lrc) {
            xs+= """
            <hudson.plugins.sectioned__view.ListViewSection>
              <jobNames><comparator class="hudson.util.CaseInsensitiveComparator"/></jobNames>
              <jobFilters/>
              <name>${this.nameSectionTesting}</name>
              <includeRegex>${this.regExLfsCiTesting}</includeRegex>
              <width>${listWidth}</width>
              <alignment>${this.listAlignment}</alignment>
              <columns>
                <hudson.views.StatusColumn/>
                <hudson.views.WeatherColumn/>
                <hudson.views.BuildButtonColumn/>
                <org.jenkins.ci.plugins.column.console.LastBuildColumn plugin="console-column-plugin@1.5"/>
                <com.robestone.hudson.compactcolumns.JobNameColorColumn plugin="compact-columns@1.10">
                  <colorblindHint>nohint</colorblindHint>
                  <showColor>false</showColor>
                  <showDescription>true</showDescription>
                  <showLastBuild>true</showLastBuild>
                </com.robestone.hudson.compactcolumns.JobNameColorColumn>
                <com.robestone.hudson.compactcolumns.LastStableAndUnstableColumn plugin="compact-columns@1.10">
                  <timeAgoTypeString>DIFF</timeAgoTypeString>
                </com.robestone.hudson.compactcolumns.LastStableAndUnstableColumn>
              </columns>
            </hudson.plugins.sectioned__view.ListViewSection>"""
        }

        xs+= """
            <hudson.plugins.sectioned__view.ListViewSection>
              <jobNames><comparator class="hudson.util.CaseInsensitiveComparator"/></jobNames>
              <jobFilters/>
              <name>${this.nameSectionReleasing}</name>
              <includeRegex>${this.regExLfsProd}</includeRegex>
              <width>${listWidth}</width>
              <alignment>${this.listAlignment}</alignment>
              <columns>
                <hudson.views.StatusColumn/>
                <hudson.views.WeatherColumn/>
                <hudson.views.BuildButtonColumn/>
                <hudson.views.LastSuccessColumn/><hudson.views.LastFailureColumn/><hudson.views.LastDurationColumn/><hudson.views.BuildButtonColumn/></columns>
            </hudson.plugins.sectioned__view.ListViewSection>"""

        return xs
    }

    /**
     * Generates the XML String which can be used to update the config.xml file.
     *
     * @return String XML String defining list view sections.
     */
    String createListViewSectionsXml_OLD() {
        return """
            <hudson.plugins.sectioned__view.ListViewSection>
              <jobNames><comparator class="hudson.util.CaseInsensitiveComparator"/></jobNames>
              <jobFilters/>
              <name>${this.nameSectionBuild}</name>
              <includeRegex>${this.regExLfsCiBuild}</includeRegex>
              <width>${listWidth}</width>
              <alignment>${this.listAlignment}</alignment>
              <columns>
                <hudson.views.StatusColumn/>
                <hudson.views.WeatherColumn/>
                <hudson.views.JobColumn/>
                <hudson.views.LastSuccessColumn/>
                <hudson.views.LastFailureColumn/>
                <hudson.views.LastDurationColumn/>
                <hudson.views.BuildButtonColumn/>
              </columns>
            </hudson.plugins.sectioned__view.ListViewSection>
            <hudson.plugins.sectioned__view.ListViewSection>
              <jobNames><comparator class="hudson.util.CaseInsensitiveComparator"/></jobNames>
              <jobFilters/>
              <name>${this.nameSectionTesting}</name>
              <includeRegex>${this.regExLfsCiTesting}</includeRegex>
              <width>${listWidth}</width>
              <alignment>${this.listAlignment}</alignment>
              <columns>
                <hudson.views.StatusColumn/>
                <hudson.views.WeatherColumn/>
                <hudson.views.JobColumn/>
                <hudson.views.LastSuccessColumn/>
                <hudson.views.LastFailureColumn/>
                <hudson.views.LastDurationColumn/>
                <hudson.views.BuildButtonColumn/>
              </columns>
            </hudson.plugins.sectioned__view.ListViewSection>
            <hudson.plugins.sectioned__view.ListViewSection>
              <jobNames><comparator class="hudson.util.CaseInsensitiveComparator"/></jobNames>
              <jobFilters/>
              <name>${this.nameSectionReleasing}</name>
              <includeRegex>${this.regExLfsProd}</includeRegex>
              <width>${listWidth}</width>
              <alignment>${this.listAlignment}</alignment>
              <columns>
                <hudson.views.StatusColumn/>
                <hudson.views.WeatherColumn/>
                <hudson.views.JobColumn/>
                <hudson.views.LastSuccessColumn/><hudson.views.LastFailureColumn/><hudson.views.LastDurationColumn/><hudson.views.BuildButtonColumn/></columns>
            </hudson.plugins.sectioned__view.ListViewSection>"""
    }

    /**
     * Check whether the sectioned view has a list view section or not.
     *
     * @return boolean true if the sectioned view has a list view section false otherwise.
     */
    boolean hasListViewSection() {
        if(this.getCurrentXml().find("<sections>")) {
            return true
        } else {
            return false
        }
    }

    /**
     * Create the sectioned view for this.branch.
     */
    void createSectionedView() {
        def trunk_view = "trunk"
        def trunk_view_owner_obj = null
        def branchSectionedViewObj = Jenkins.instance.getView(this.branchSectionedView)

        if(branchSectionedViewObj) {
            this.out.println("[INFO] view ${this.branchSectionedView} already exists.")
        } else {
            trunk_view_owner_obj = Jenkins.instance.getView(trunk_view).getOwner();
            branchSectionedViewObj = new SectionedView(this.branchSectionedView)
            trunk_view_owner_obj.addView(branchSectionedViewObj)
            this.out.println("[INFO] Created view ${this.branchSectionedView}")
        }
    }

    /**
     * Add list view sections to the sectioned view.
     */
    void addListViewSections() {
        def requestUrl = "${this.jenkinsUrl}view/${this.branchSectionedView}/config.xml"
        def currentXml = this.getCurrentXml()
        def configurationFile = null
        def newConfigXml = null
        def proc = null

        if(this.lrc) {
            if(!this.hasListViewSection()) {
                this.out.println("[INFO] view has not list view sections")
                newConfigXml = currentXml.replaceFirst("<sections/>", "<sections>\n"+this.createListViewSectionsXml()+"\n</sections>")
            } else {
                this.out.println("[INFO] view already has list view sections")
                newConfigXml = currentXml.replaceFirst("</sections>", this.createListViewSectionsXml()+"\n</sections>")
            }
        } else {
            if(!this.hasListViewSection()) {
                this.out.println("[INFO] view does not have list view sections")
                newConfigXml = currentXml.replaceFirst("<sections/>", "<sections>\n"+this.createListViewSectionsXml()+"\n</sections>")
            } else {
                this.out.println("[INFO] view already has list view sections")
                newConfigXml = currentXml.replaceFirst("<sections>", "<sections>\n"+this.createListViewSectionsXml())
            }
        }

        configurationFile = new File("config.xml")
        configurationFile.write(newConfigXml)
        proc = ["curl", "-u${this.apiUser}:${this.apiToken}", "${requestUrl}", "--noproxy", "localhost", "--data-binary", "@config.xml"].execute()
        proc.waitFor()
        this.out.println("addListViewSections() proc.text: $proc.text")
    }
}
