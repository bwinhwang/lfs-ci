#!/bin/bash

source ${LFS_CI_ROOT}/lib/common.sh
source ${LFS_CI_ROOT}/lib/jenkins.sh

branchName=TST_GCC49_LRC
branchDisplayName="GCC 4.9 Test for LRC"
lastReleaseName="PS_LFS_OS_2014_08_0001"
trunk=LRC
trunkDisplayName="LRC trunk"

# ls /var/fpwork/demx2fk3/lfs-jenkins/home/jobs/*/promotions

for job in $(cat jobList)
do
    if [[ -e ${job}.xml ]] ; then
        info "delete ${job}.xml"
        rm -rf ${job}.xml
    fi

    info "get configuration of ${job}"
    getJob "${job}" ${job}.xml

    newJobName=$(echo ${job} | sed "s/_-_${trunk}_-_/_-_${branchName}_-_/")
    info "new job will be ${newJobName}"
    if existsJenkinsJob "${newJobName}" ; then
        info "delete new job ${newJobName} first, because it exists"
        deleteJenkinsJob "${newJobName}"
    fi
done

for job in $(cat jobList)
do
    info "${job}"

    if [[ -e ${job}.xml ]] ; then
        info "delete ${job}.xml"
        rm -rf ${job}.xml
    fi

    getJob "${job}" ${job}.xml

    newJobName=$(echo ${job} | sed "s/_-_${trunk}_-_/_-_${branchName}_-_/")
    displayName=$(       xpath -q -e '/project/displayName/node()' ${job}.xml)
    if [[ ${newJobName} =~ Build$ ]] ; then
        downStreamProjects=$(cat jobList | grep ${job}_ | tr "\n" "," )
    else
        downStreamProjects=$(xpath -q -e '/project/builders/hudson.plugins.parameterizedtrigger.TriggerBuilder/configs/hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig/projects/node()' ${job}.xml)
    fi
    upStreamProjects=$(  xpath -q -e '/project/publishers//hudson.tasks.BuildTrigger/childProjects/node()' ${job}.xml)

    newDownStreamProjects=$(echo ${downStreamProjects} | sed "s/_-_${trunk}_-_/_-_${branchName}_-_/g")
    newUpStreamProjects=$(  echo ${upStreamProjects}   | sed "s/_-_${trunk}_-_/_-_${branchName}_-_/g")
    newDisplayName=$(       echo ${displayName}        | sed "s/ - ${trunkDisplayName} - / - ${branchDisplayName} - /g")

    if [[ ${job} == ${newJobName} ]] ; then
        error "something is wrong. old and new job name is the same"
        exit 1
    fi        

    info "new job     name         ${newJobName}"
    info "new display name         ${newDisplayName}"
    info "new down stream projects ${newDownStreamProjects}"
    info "new up stream projects   ${newUpStreamProjects}"

    cat ${job}.xml | xmlsubst.pl "/project/displayName:=fix(${newDisplayName})"  \
                   | xmlsubst.pl "/project/builders/hudson.plugins.parameterizedtrigger.TriggerBuilder/configs/hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig/projects:=fix(${newDownStreamProjects})"  \
                   | xmlsubst.pl "/project/publishers/hudson.tasks.BuildTrigger/childProjects:=fix(${newUpStreamProjects})" \
                   | xmlsubst.pl "/project/publishers/hudson.plugins.parameterizedtrigger.BuildTrigger/configs/hudson.plugins.parameterizedtrigger.BuildTriggerConfig/projects:=fix(${newUpStreamProjects})" \
        > a
    execute mv -f a ${job}.xml

    info "get promotion"

    for promotion in $( xmlsubst.pl "project/properties/hudson.plugins.promoted__builds.JobPropertyImpl/activeProcessNames/string:=print()" < ${job}.xml ) ; do
        info "promotion found ${promotion}"
        promotionDir=$(getConfig jenkinsMasterServerPath)/jobs/${newJobName}/promotions/${promotion}
        oldPromotionDir=$(getConfig jenkinsMasterServerPath)/jobs/${job}/promotions/${promotion}
        execute ssh psulm@maxi mkdir -p ${promotionDir}
        # todo fix config xml
        execute ssh psulm@maxi cp -f ${oldPromotionDir}/config.xml ${promotionDir}
    done

    createJenkinsJob "${newJobName}" ${job}.xml
    info "job ${newJobName} created."

    disableJob "${newJobName}"

done

for job in $(cat jobList)
do
    newJobName=$(echo ${job} | sed "s/_-_${trunk}_-_/_-_${branchName}_-_/")
    info "updating ${newJobName}"
    updateJenkinsJob  ${newJobName} ${job}.xml
    disableJob "${newJobName}"
done

