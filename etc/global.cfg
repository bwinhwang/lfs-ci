#
# -------------------------------------------------------------
# configuration file for LFS CI
# -------------------------------------------------------------
#
# general syntax for configuration file:
#
# bracket_open  ::= <
# bracket_close ::= >
# line          ::= <key> <flags> = <value>
# key           ::= [a-zA-Z][a-zA-Z0-9_]*
# flags         ::= <bracket_open> <flag> <bracket_close> | <bracket_open> <flag>, <flag> <bracket_close>
# flag          ::= <key>[ : | ~ ]<value>
# value         ::= .*
#  
# operators
# ---------
# :  exact match
# ~  regex match
#
# naming of the keys
# ------------------
# try to be as specific as possible. It should be possible to get the purpose of this config from the name.
#
# available default keys / flags
# ------------------------------
#  * all environment variables like ${USER}, ${HOME}, ${TERM}, ...
#  * all variables, which are given with -t 
#    e.g. getConfig key -t cfg1:value1 -t cfg2:value2
#  * following variables from the job name
#    productName, location, taskName, subTaskName, config
#    e.g. LFS_CI_-_trunk_-_Build_-_FSM-r3_-_FSMF_-_2
#         productName = LFS
#    (!!) location    = pronb-developer 
#            taskName = Build
#         subTaskName = FSM-r3
#              config = FSMF
#    e.g. LFS_CI_-_FB1504_-_Test_-_FSM-r3_-_FSMF_-_2
#         productName = LFS
#         location    = FB1504
#            taskName = Test
#         subTaskName = FSM-r3
#              config = FSMF
#    

# ----------------------------------------------------------------------------------------------
# how "finding the corect key" is working:
# examples:
#
# key = a
# result => a
# why: only matching key

# key = a
# key = b
# result => a
# why: two matching keys, first hit wins

# key = a
# key < foo:bar > = b
# foo = bar
# result => b
# why: line 2 has a flag, which is matching => win

# key = a
# key < foo:bar > = b
# foo = foo
# result => a 
# why: line 2 has a flag, which is NOT matching => line 1 wins

# key = a
# key < foo:bar > = b
# key < foo:bar, bar:foo > = c
# foo = bar
# bar = foo
# result => c
# why: line 3 has flags, which are matching. line 2 has also matching flag, but line 3 has more matching flags => line 3 wins

# key = a
# key < foo:bar, bar:foo > = b
# bar = foo
# result => a
# why: only a subset of the flags in line 2 are matching, but ALL flags must match for a win. So the line 1 is winning

# key = a
# key < foo:bar, bar:foo > = b
# key < foo:bar, foobar:bar > = c
# foo = bar
# bar = foo
# foobar = bar
# result: b
# why: line 2 and line 3 have matching flags with same amount, so the first key is winning 

# ----------------------------------------------------------------------------------------------


# add this prefix to the label name. 
# this should be empty by default. only required for lfs-sandbox
LFS_PROD_label_prefix =

# used options for rsync operation in uc package and some admin usecases
RSYNC_options <> = -HavzSO

# just a wrapper setting for <year><month><daty>
Ymd = ${date_%Ymd}

# TODO: demx2fk3 2015-01-22 not implemented yet
# this part is currently in the config.sh
# LFS_CI_uc_package_map_cfg_to_architecture < cfg:fct > = mips64-octeon2-linux-gnu
# LFS_CI_uc_package_map_cfg_to_architecture < cfg:fsm3_octeon2 > = mips64-octeon2-linux-gnu

# Mapping between the usecases and the source file, where the use case is implemented
# TODO: demx2fk3 2015-01-21 add all usecases here
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:ADMIN_CLEANUP_S3                                > = uc_admin_cleanup_s3.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:ADMIN_CLONE_SVN                                 > = uc_admin_svn_clone.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:ADMIN_CREATE_BRANCHES_CFG                       > = uc_admin_create_branches_cfg.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:ADMIN_CREATE_PATCH_RELEASE                      > = uc_admin_create_patch_release.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:ADMIN_ENABLE_JENKINS_JOB                        > = uc_admin_enable_job.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:ADMIN_MYSQL_BACKUP                              > = uc_admin_mysql_backup.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:ADMIN_MYSQL_RESTORE                             > = uc_admin_mysql_backup.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:ADMIN_RESTORE_SVN_CLONE                         > = uc_admin_svn_clone.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:HWSWID_DB2TXT                                   > = uc_hwswid_db2txt.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LAB_REPAIR_TARGET                               > = uc_repair_target.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE~LFS_BRANCHING                                   > = uc_branching.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_BUILD_CREATE_VERSION                        > = uc_build.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_BUILD_PLATFORM                              > = uc_build.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE~LFS_CI_SANDBOX_TEST_TARGET_DUMMY                > = uc_sandbox_test.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE~LFS_CI_TESTING_TMF_ON_TARGET                    > = uc_test_on_target.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_COPY_SONAR_DATA                             > = uc_sonar_data.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_COPY_SONAR_SCT_DATA                         > = uc_sonar_data.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_COPY_SONAR_UT_DATA                          > = uc_sonar_data.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE~LFS_DEVELOPER                                   > = uc_developer_build.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE~LFS_KNIFE                                       > = uc_knife_build.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_READY_FOR_RELEASE                           > = uc_ready_for_release.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_RELEASE_CREATE_RELEASE_TAG                  > = uc_release_create_rel_tag.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_RELEASE_CREATE_SOURCE_TAG                   > = uc_release_create_source_tag.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_RELEASE_PREPARE                             > = uc_release.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_RELEASE_PRE_RELEASE_CHECKS                  > = uc_release_prechecks.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_RELEASE_SEND_RELEASE_NOTE                   > = uc_release_send_release_note.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_RELEASE_SHARE_BUILD_ARTIFACTS_KERNELSOURCES > = uc_release_share_build_artifacts_kernelsource.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_RELEASE_SHARE_BUILD_ARTIFACTS               > = uc_release_share_build_artifacts.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_RELEASE_UPDATE_DEPS                         > = uc_release_update_deps.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_RELEASE_UPLOAD_TO_SUBVERSION                > = uc_release_upload_to_svn.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_SMOKE_TEST_POST_ACTION                      > = uc_smoketest_postaction.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_TEST_COVERAGE_COLLECT                       > = uc_test_coverage.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_TEST                                        > = uc_test.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:LFS_UPDATE_ECL                                  > = uc_ecl.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:PKGPOOL_DEVELOPER_BUILD                         > = uc_developer_build.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE~PKGPOOL                                         > = uc_pkgpool.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:UPDATE_LOCATIONS_TXT                            > = uc_update_locations_txt.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:VTC_PLUS_LFS_SYNC_PRODUCTION                    > = uc_vtc_plus_lfs.sh
LFS_CI_usecase_file < LFS_CI_GLOBAL_USECASE:YAFT_UPDATE_REVISION                            > = uc_yaft_update_revision.sh

# -------------------------------------------------------------
# branching stuff
# -------------------------------------------------------------
# Comma separated list of jobs to be excluded by create branch script.
# Items in the list can also be a regex.
branchingExcludeJobs = LFS_CI_-_trunk_-_update_to_latest_YAFT,LFS_CI_-_trunk_-_TestLfsPlusVtc,LFS_CI_-_trunk_-_KlocworkBuild_-_.*
# Name of the main LRC build job -> used in createBranch.gry
jenkinsMainBuildJobName_LRC = LFS_CI_-_LRC_-_Build
# Comma separated list of promotions to be excluded by create branch script.
branchingExcludePromotions = LFS_CI_-_trunk_-_Build/promotions/DDAL_FSMr3


# during each start of the scripting, the scripting is checking itself for "sanity"
# if this senity check fails, the scripting refuses to work.
# this behavour can be enabled / disabled
LFS_CI_GLOBAL_should_run_sanity_checks < USER:psulm    > = 1
LFS_CI_GLOBAL_should_run_sanity_checks < USER:ca_lrcci > = 1


# mapping from branch name to location name - if it is different.
LFS_CI_global_mapping_location < job_location:fsmr4    > = FSM_R4_DEV
LFS_CI_global_mapping_location < job_location:kernel3x > = KERNEL_3.x_DEV
LFS_CI_global_mapping_location < job_location:20M2_09  > = PS_LFS_OS_20M2_09
LFS_CI_global_mapping_location < job_location:20M2_12  > = PS_LFS_OS_20M2_12
LFS_CI_global_mapping_location < job_location:trunk    > = pronb-developer
LFS_CI_global_mapping_location = ${job_location}

# new way to do this:
# LFS_CI_global_mapping_location < job_location:trunk, taskName~Build, subTaskName:FSM-r4 > = FSM_R4_DEV


# required artifacts for a workspace
LFS_CI_prepare_workspace_required_artifacts < LFS_CI_GLOBAL_USECASE:LFS_READY_FOR_RELEASE        > = fsmci
LFS_CI_prepare_workspace_required_artifacts < LFS_CI_GLOBAL_USECASE:VTC_PLUS_LFS_SYNC_PRODUCTION > = fsmci

# this usecase requires all artifacts
LFS_CI_prepare_workspace_required_artifacts < LFS_CI_GLOBAL_USECASE:LFS_RELEASE_SHARE_BUILD_ARTIFACTS > =
LFS_CI_prepare_workspace_required_artifacts < LFS_CI_GLOBAL_USECASE:LFS_RELEASE_SEND_RELEASE_NOTE     > = fsmpsl psl fsmci lrcpsl externalComponents
LFS_CI_prepare_workspace_required_artifacts < LFS_CI_GLOBAL_USECASE:LFS_RELEASE_PREPARE               > = fsmci
LFS_CI_prepare_workspace_required_artifacts < LFS_CI_GLOBAL_USECASE:LFS_RELEASE_PRE_RELEASE_CHECKS    > = fsmci
LFS_CI_prepare_workspace_required_artifacts < LFS_CI_GLOBAL_USECASE:LFS_RELEASE_UPDATE_DEPS           > = externalComponents fsmci
LFS_CI_prepare_workspace_required_artifacts < LFS_CI_GLOBAL_USECASE:LFS_RELEASE_CREATE_RELEASE_TAG    > = externalComponents fsmci
# all other release usecaes just need fsmci artifacts
LFS_CI_prepare_workspace_required_artifacts < LFS_CI_GLOBAL_USECASE~LFS_RELEASE                       > = fsmci externalComponents


# FTP
ftpHostAddress = 93.183.20.52
ftpUserName = lfnokia
ftpPassword = BowhiorcOc5


#
# the following values in branches.cfg are coming from the database. branches.cfg is generated
# LFS_CI_branch_status                  | status of the branch
# LFS_CI_uc_update_ecl_url              | list of svn urls of ecl files
# LFS_PROD_branch_to_tag_regex          | regex for label name / production name / tag name, every branch must have a defined regex.
# LFS_PROD_ps_scm_branch_name           | name of the ps branch for release note
# LFS_PROD_svn_delivery_repos_name      | mapping between the branches and the svn delivery repos
# LFS_PROD_tag_to_branch                | mapping between tag and branch name
# LFS_PROD_uc_release_based_on          | build name / release, which the branch is based on
# LFS_PROD_uc_release_based_on_revision | revision, which the branch is based on
include branches.cfg

include artifacts.cfg
include booking.cfg
include customscm.cfg
include git.cfg
include hwswid.cfg
include jenkins.cfg
include klocwork.cfg
include linsee.cfg
include mysql.cfg
include pkgpool.cfg
include special_build.cfg
include sonar.cfg
include subversion.cfg
include sync.cfg
include tmf.cfg
include uc_build.cfg
include uc_ecl.cfg
include uc_vtc.cfg
include uc_package.cfg
include uc_release.cfg
include wft.cfg
include yaft.cfg
include customSCM.cfg


# remove this after merge 
SVN_tag_path_name = os/tags
SVN_branch_path_name = os/branches
LFS_PROD_uc_release_kernelsources_tag_prefix = ${LFS_PROD_uc_release_source_tag_prefix}
