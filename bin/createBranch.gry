///////////////////////////////////////////////////////////////////////////////
// Groovy script to crate a new branch in the LFS Jenkins.
//
// 1. Take environment vars and parameters from Jenkins job.
// 2. Copy the jobs from src-branch to new-branch.
// 3. Update the job configuration by editing config.xml .
// 4. On the new job update the custom workspace if existing.
// 5. Copy and configure promotions if there are any.
// 6. Reload the configuration of the new job.
// 7. In Case of LRC create the SCM view
// 8. Create  sectioned view for the new branch.
//     - Copy the config.xml from src-branch and edit it
////////////////////////////////////////////////////////////////////////////////


import jenkins.model.Jenkins
import hudson.model.ParametersAction
import hudson.model.ListView
import hudson.plugins.sectioned_view.SectionedView
import javax.xml.transform.stream.StreamSource
import java.io.File
import java.io.FileInputStream;


println("\n\nRunning script createBranch.gry\n")

def j = Jenkins.instance

def thr = Thread.currentThread()

def build = thr?.executable

src_branch = ""

display_src_branch = ""

new_branch = ""

comment = ""

copy_jobs = false

lrc = false

doJenkins = false

activateRootJobs = false

debug = true

dev_branch = false

fsmr4 = false

if(build.getEnvironment(listener).get("LRC") == "true") {
    lrc = true
}
println("[INFO] lrc: $lrc")

// Get parameters from the Jenkins job
def parameters = build?.actions.find{ it instanceof ParametersAction }?.parameters
parameters.each {
    if(it.name == "NEW_BRANCH") {
        new_branch = it.value
    }
    else if(it.name == "SRC_BRANCH") {
        src_branch = it.value
    }
    else if(it.name == "COMMENT")
        comment = it.value
    else if(it.name == "ACTIVATE_ROOT_JOBS")
        activateRootJobs = it.value
    else if(it.name == "DO_JENKINS") {
        doJenkins = it.value
    }
    else if(it.name == "DEBUG") {
        debug = it.value
    }
    else if(it.name == "DEVELOPER_BRANCH") {
        dev_branch = it.value
    }
    else if(it.name == "FSMR4") {
        fsmr4 = it.value
    }
}

if(doJenkins == false) {
    println("[INFO] DO_JENKINS is false - nothing to do.")
    return 0
}

if(!new_branch || !src_branch || !comment) {
    throw new RuntimeException("At least one mandatory parameter is missing")
}

env = new HashMap()
env.put("JENKINS_HOME", build.getEnvironment(listener).get("JENKINS_HOME"))
env.put("JENKINS_URL", build.getEnvironment(listener).get("JENKINS_URL"))
env.put("JENKINS_API_TOKEN", build.getEnvironment(listener).get("JENKINS_API_TOKEN"))
env.put("JENKINS_API_USER", build.getEnvironment(listener).get("JENKINS_API_USER"))
env.put("LFS_CI_ROOT", build.getEnvironment(listener).get("LFS_CI_ROOT"))
env.put("TEMPLATE_DIR", build.getEnvironment(listener).get("CONFIGXML_TEMPLATE_DIR"))
env.put("TEMPLATE_SUFFIX", build.getEnvironment(listener).get("CONFIGXML_TEMPLATE_SUFFIX"))
env.put("WORKSPACE", build.getEnvironment(listener).get("WORKSPACE"))
env.put("JOBS_EXCLUDE_LIST", build.getEnvironment(listener).get("JOBS_EXCLUDE_LIST"))
env.put("PROMOTIONS_EXCLUDE_LIST", build.getEnvironment(listener).get("PROMOTIONS_EXCLUDE_LIST"))
env.put("MAIN_BUILD_JOB_NAME_LRC", build.getEnvironment(listener).get("MAIN_BUILD_JOB_NAME_LRC"))

def config = new HashMap()
def bindings = getBinding()
config.putAll(bindings.getVariables())
def out = config['out']

// Copy jobs (inkl. promotions) and configure the copied jobs for the new branch
if(!lrc) {
    createBranch = new CreateBranch(src_branch, new_branch, debug, comment, activateRootJobs, env, out, dev_branch, fsmr4)
} else {
    createBranch = new CreateBranchLRC(src_branch, new_branch, debug, comment, activateRootJobs, env, out, dev_branch)
}
createBranch.main()

// Create sectioned and SCM (LRC only) view for the new branch
// TODO: Also create two classes (CreateView and CreateViewLRC)
createViews = new CreateViews(src_branch, new_branch, lrc, debug, env, out, dev_branch, fsmr4)
createViews.main()


class Common {

    def srcBranch
    def newBranch
    def debug
    def env
    def out
    def devBranch
    def fsmr4
    def fromTrunk
    def rootView
    def trunkView
    def pkgPoolReplace

    Common(srcBranch, newBranch, debug, env, out, devBranch, fsmr4) {
        this.srcBranch = srcBranch
        this.newBranch = newBranch
        this.debug = debug
        this.env = env
        this.out = out
        this.devBranch = devBranch
        this.fsmr4 = fsmr4

        // TODO: check if this.trunkView could be replaced with this.srcBranchViewObj.name
        // If source branch is trunk, jobs are copied from this.trunkView.
        this.trunkView = "trunk"

        this.fromTrunk = true
        this.pkgPoolReplace = "*/master"

        // The root view for a branch is called YYMM except for DEV branches.
        // Eg. the root view for FB1504 is 1504
        if(this.devBranch) {
            this.rootView = "DEV"
        } else if(this.newBranch[0..1] == "FB") {
            this.rootView = this.newBranch[2..-1]
        } else if(this.newBranch[0..1] == "MD") {
            this.rootView = this.newBranch[3..-1]
        } else {
            throw new RuntimeException("Branch name must start with either FB or MD.")
        }

        // Is the new branch a sub branch eg. FB1405_LNP80?
        if(this.rootView.find("_")) {
            rootView = rootView.split("_")[0]
        }

        if(this.srcBranch != "trunk") {
            this.fromTrunk = false
            this.pkgPoolReplace = "*/${this.srcBranch}"
        }
    }

    void processFileInplace(file, Closure processText) {
        def text = file.text
        file.write(processText(text))
    }

    void dbg(msg) {
        this.out.println("[DEBUG] $msg")
    }

    void inf(msg) {
        this.out.println("[INFO] $msg")
    }

    void warn(msg) {
        this.out.println("[WARNING] $msg")
    }

    void err(msg) {
        this.out.println("[ERROR] $msg")
    }
}

/**
 * Class which can copy and configure jobs for a new branch. 
 */
class CreateBranch extends Common {

    def comment
    def activateRootJobs

    def displayNameSrcBranch
    def displayNameNewBranch
    def srcBranchViewObj
    def jobsList
    def jobsToEnable
    def jobNameReplace
    def jobs2Exclude
    def promotions2Exclude
    def srcBranchNumber

    /**
     * Constructor
     *
     * @param srcBranch name of the branch (eg. trunk).
     * @param newBranch name of the nes branch (eg. FB1408).
     * @param debug true debug mode false otherwise
     * @param comment the comment
     * @param activateRootJobs true if the root jobs shall be activated, false otherwise
     * @param env some variables are shipped via this hash table 
     * @param out the output stream so that this.out.println() works.
     * @param devBranch true if this is a development branch, false otherwise
     * @param fsmr4 true if fsmr4 is needed, false otherwise
     */
    CreateBranch(srcBranch, newBranch, debug, comment, activateRootJobs, env, out, devBranch, fsmr4) {
        super(srcBranch, newBranch, debug, env, out, devBranch, fsmr4)
        this.comment = comment
        this.activateRootJobs = activateRootJobs

        this.displayNameSrcBranch = this.srcBranch
        this.displayNameNewBranch = this.newBranch
        this.jobsToEnable = []
        this.jobNameReplace = srcBranch

        // List of jobs to be excluded. Job names can also be a regex.
        this.jobs2Exclude = this.env.get("JOBS_EXCLUDE_LIST").split(",")
        this.inf("jobs to exclude: ${this.jobs2Exclude}")
        this.promotions2Exclude = this.env.get("PROMOTIONS_EXCLUDE_LIST").split(",")
        this.inf("promotions to exclude: ${this.promotions2Exclude}")
        this.jobsList = []

        if(this.srcBranch[0..1] == "FB") {
            this.srcBranchNumber = this.srcBranch[2..5].toInteger()
        } else if(this.srcBranch[0..1] == "MD") {
            this.srcBranchNumber = this.srcBranch[3..6].toInteger()
        }

        if(this.debug) {
            this.dbg("srcBranchNumber is ${this.srcBranchNumber}")
        }

        // If fsmr4 comes via the jenkins job and its value is true,
        // we don't check the source branch because the user knows
        // that the source branch contains jobs with fsmr4 specific
        // job names.

        if(this.fsmr4 == false) {
            if(this.srcBranch == "trunk") {
                this.inf("set fmsr4 to false because source branch is trunk.")
                this.fsmr4 = false
            } else if(this.srcBranch == "MD11507") {
                // MD11507 is the last branch that contains FSMR4 specific job names
                this.inf("set fmsr4 to true because source branch is MD11507.")
                this.fsmr4 = true
            } else if(this.srcBranchNumber > 1506) {
                // Branches >= FB1507 have kernel 3.14 -> no special fsmr4 job names
                this.inf("set fmsr4 to false because srcBranchNumber > 1506 and source branch is not MD11507.")
                this.fsmr4 = false
            } else {
                this.inf("set fmsr4 to true.")
                this.fsmr4 = true
            }
        } else {
            this.inf("fsmr4 is true -> got it from jenkins job.")
        }
    }

    void main() {
        this.getSrcBranchView()
        this.collectJobs()
        this.copyJobs()
        this.activateJobs()
    }

    void getSrcBranchView() {
        def sourceView = null
        if(this.fromTrunk) {
            sourceView = this.trunkView
            this.srcBranchViewObj = Jenkins.instance.getView(sourceView)
        } else {
            sourceView = this.srcBranch
            def rootViewObj = Jenkins.instance.getView(this.rootView)
            this.srcBranchViewObj = rootViewObj.getView(sourceView)
        }

        if(!this.srcBranchViewObj) {
            this.err("the source branch view $sourceView does not exist.")
            throw new RuntimeException("The source branch view does not exist.")
        }

        this.inf("copy jobs from view ${this.srcBranchViewObj}")
    }

    void updateWorkspace(job) {
        hudson.model.AbstractProject project = job
        def newWorkspace = project.getCustomWorkspace()
        if(newWorkspace) {
            newWorkspace.replace(this.srcBranch, this.newBranch)
            project.setCustomWorkspace(newWorkspace)
            project.save()
        }
    }

    /**
     * Save (reload) "job" with configuration from "configFile".
     */
    void reloadJobConfig(job, configFile) {
        InputStream is = new FileInputStream(configFile);
        job.updateByXml(new StreamSource(is));
        job.save();
        this.inf("reloaded config for job \"$job.name\"")
    }

    /**
     * Remove promotions directoy for "job" if specified in
     * the CI scripting config via parameter branchingExcludePromotions.
     * Argument "job" is the source (the original) job (eg. LFS_CI_-_trunk_-_Build)
     * and not the new job.
     */
    void removePromotion(job) {
        for(promo in this.promotions2Exclude) {
            // We need the promotion path of the new job.
            def promoPath = new File(this.env.get("JENKINS_HOME") + "/jobs/" + promo.replace(this.srcBranch, this.newBranch))
            if(promo.startsWith(job.name) && promoPath.exists()) {
                this.inf("remove promotion dir ${promoPath}")
                promoPath.deleteDir()
            }
        }
    }

    /**
     * Update config.xml of newJob.
     */
    File updateJobConfig(job, newJob) {
        def configXMLFile = newJob.getConfigFile();
        def configFile = configXMLFile.getFile();

        this.inf("replace -_${this.jobNameReplace}_- by -_${this.newBranch}_- in jobs config.xml.")

        processFileInplace(configFile) { text ->
            text.replaceAll("-_"+this.jobNameReplace+"_-", "-_"+this.newBranch+"_-")
        }

        // Vtc job exists on trunk only
        if(newJob.name == "LFS_CI_-_${this.newBranch}_-_Test") {
            processFileInplace(configFile) { text ->
                text.replaceAll("LFS_CI_-_${this.newBranch}_-_TestLfsPlusVtc", "")
            }
        }

        if(newJob.name == "LFS_CI_-_${this.newBranch}_-_Build") {
            this.inf("replace <spec>* * * * *</spec> by <spec>*/3 * * * *</spec> in jobs config.xml.")
            processFileInplace(configFile) { text ->
                text.replaceAll("<spec>* * * * *</spec>", "<spec>*/3 * * * *</spec>")
            }
        }

        if(this.fsmr4) {
            processFileInplace(configFile) { text ->
                text.replaceAll("LFS_CI_-_fsmr4_-", "LFS_CI_-_"+this.newBranch+"_FSMR4_-")
            }
            processFileInplace(configFile) { text ->
                text.replaceAll("LFS_CI_-_${this.srcBranch}_FSMR4_-", "LFS_CI_-_"+this.newBranch+"_FSMR4_-")
            }
        }

        if(newJob.getName() == "PKGPOOL_-_"+this.newBranch+"_-_Build") {
            this.inf("replace ${this.pkgPoolReplace} by */${this.newBranch} in jobs config.xml.")
            processFileInplace(configFile) { text ->
                text.replace(this.pkgPoolReplace, "*/"+this.newBranch)
            }
            this.inf("replace <spec>* * * * *</spec> by <spec>*/3 * * * *</spec> in jobs config.xml.")
            processFileInplace(configFile) { text ->
                text.replaceAll("<spec>* * * * *</spec>", "<spec>*/3 * * * *</spec>")
            }
        }

        this.inf("updated job configuration for job \"$newJob.name\"")
        return configFile
    }

    /**
     * Copy and configure the promotions of "job" to "newJob".
     */
    void copyPromotions(job, newJob) {
        def promoSrcDir = new File("${this.env.get("JENKINS_HOME")}/jobs/${job.name}/promotions")
        def promoDstDir = new File("${this.env.get("JENKINS_HOME")}/jobs/${newJob.name}/promotions")
        for(property in job.getAllProperties()) {
            if(property.getClass() == hudson.plugins.promoted_builds.JobPropertyImpl) {
                this.inf("Job \"$job.name\" has promotions.")
                for(action in property.getJobActions())  {
                    for(process in action.getProcesses()) {
                        if(process.getClass() == hudson.plugins.promoted_builds.PromotionProcess) {
                            new File(promoDstDir.getAbsolutePath()+"/"+process.getName()).mkdirs()
                            def builder = new AntBuilder()
                            builder.sequential {
                                copy(tofile: promoDstDir.getAbsolutePath()+"/"+process.getName()+"/config.xml",
                                     file:   promoSrcDir.getAbsolutePath()+"/"+process.getName()+"/config.xml",
                                     overwrite: true)
                            }
                            def dstFile = new File(promoDstDir.getAbsolutePath()+"/"+process.getName()+"/config.xml")
                            this.inf("configuring file "+dstFile.getAbsolutePath())
                            if(this.debug) {
                                this.inf("promotion - replace -_${this.jobNameReplace}_- by -_${this.newBranch}_- in jobs config.xml.")
                            }
                            processFileInplace(dstFile) { text ->
                                text.replaceAll("-_"+this.jobNameReplace+"_-", "-_"+this.newBranch+"_-")
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Activate all jobs which are in list this.jobsToEnable
     * this.jobsToEnable is filled by the method copyJob().
     */
    void activateJobs() {
        if(this.activateRootJobs) {
            for(disabledJob in this.jobsToEnable) {
                if(debug) {
                    this.dbg("enable job $disabledJob.name.")
                } else {
                    this.inf("enable job $disabledJob.name.")
                    disabledJob.enable()
                }
            }
        } else {
            this.inf("not enabling before disabled jobs " + this.jobsToEnable)
        }
    }

    /**
      * Return true if "job_name" matches an entry in this.jobs2Exclude,
      * false otherwise.
      */
    boolean job2exclude(job_name) {
        for(toExclude in this.jobs2Exclude) {
            toExclude = toExclude.trim()
            if(job_name =~ /${toExclude}/) {
                return true
            }
        }
        return false
    }

    /**
     * Add "jobToAdd" to this.jobsList if it is not yet added.
     * Return true if job was added to the list, false otherwise.
     */
    boolean addJob(jobToAdd) {
        for(job in this.jobsList) {
            if(job.name == jobToAdd.name) {
                return false
            }
        }
        this.jobsList.add(jobToAdd)
        return true
    }

    /**
     * Collects the jobs to be copied in the list this.jobsList.
     * If there are jobs which should not be copied add them to
     * the parameter "branchingExcludeJobs" in the configuration.
     */
    void collectJobs() {
        def numJobs = 0
        this.inf("Creating list of jobs to be copied.")

        for(job in this.srcBranchViewObj.getItems()) {
            if(this.job2exclude(job.name)) {
                this.inf("excluding job ${job.name}.")
                continue
            }
            def added = this.addJob(job)
            if(added) {
                this.inf("Added job $job.name")
                numJobs++
            }
        }

        this.inf("$numJobs jobs to be copied.\n")
    }

    /**
     * Copy the job "job" to a new job with a new name.
     * The name of the new job is copied from the original job and
     * the branch name is replaced. In case the new job ends with
     * "_-_Build" it is disabled.
     */
    hudson.model.Job copyJob(job) {
        def newName = null
        def newJob = null

        if(this.fsmr4 && job.getName().find("LFS_CI_-_fsmr4_-")) {
            newName = job.getName().replaceFirst("LFS_CI_-_fsmr4_-", "LFS_CI_-_"+this.newBranch+"_FSMR4_-")
            if(this.debug) {
                this.dbg("copy job: $job.name -> $newName")
            } else {
                this.inf("copy job: $job.name -> $newName")
                newJob = Jenkins.instance.copy(job, newName)
                newJob.setDisplayName(job.getDisplayName().replaceFirst(this.displayNameSrcBranch, this.displayNameNewBranch))
            }
        } else if(this.fsmr4 && job.getName().find("LFS_CI_-_${this.srcBranch}_FSMR4_-")) {
            newName = job.getName().replaceFirst("LFS_CI_-_${this.srcBranch}_FSMR4_-", "LFS_CI_-_"+this.newBranch+"_FSMR4_-")
            if(this.debug) {
                this.dbg("copy job: $job.name -> $newName")
            } else {
                this.inf("copy job: $job.name -> $newName")
                newJob = Jenkins.instance.copy(job, newName)
                newJob.setDisplayName(job.getDisplayName().replaceFirst(this.displayNameSrcBranch, this.displayNameNewBranch))
            }
        } else {
            newName = job.getName().replaceFirst("-_"+this.jobNameReplace+"_-", "-_"+this.newBranch+"_-")
            if(this.debug) {
                this.dbg("copy job: $job.name -> $newName")
            } else {
                this.inf("copy job: $job.name -> $newName")
                newJob = Jenkins.instance.copy(job, newName)
                newJob.setDisplayName(job.getDisplayName().replaceFirst(this.displayNameSrcBranch, this.displayNameNewBranch))
            }
        }

        if(newName.endsWith("_-_Build")) {
            if(this.debug) {
                this.dbg("set description of new job: ${this.comment}")
                this.dbg("disable new job: ${newName}")
            } else {
                newJob.setDescription(this.comment)
                this.inf("set description of new job: ${this.comment}")
                // disable build jobs because not all jobs are created jet.
                newJob.disable()
                this.inf("disable new job: ${newName}")
                this.jobsToEnable.add(newJob)
            }
        }

        return newJob
    }

    /**
     * Remove puplishers related to "Test history matrix (Unitth)"
     * from job.
     */
    void removePublishers(job) {
        try {
            if(job.name.find("_-_Test_-_") || job.name.find("_-_TestNonBlocking_-_")) {
                for(publisher in job.publishersList) {
                    if(publisher instanceof hudson.tasks.ArtifactArchiver) {
                        job.publishersList.remove(publisher)
                        this.inf("removed publisher " + publisher + " from " + job.name)
                    } else if(publisher instanceof org.jenkinsci.plugins.unitth.TestHistoryReporter) {
                        job.publishersList.remove(publisher)
                        this.inf("removed publisher " + publisher + " from " + job.name)
                    } else if(publisher instanceof hudson.plugins.parameterizedtrigger.BuildTrigger) {
                        job.publishersList.remove(publisher)
                        this.inf("removed publisher " + publisher + " from " + job.name)
                    }
                }
            }
        } catch(Exception e) {
            // Test History plugin is not installed
            this.warn(e)
        }
    }

    /**
     * Copy each job which is part of this.jobsList.
     *
     * @param rmPublishers if true, method removePublishers(job) is invoked.
     */
    void copyJobs(rmPublishers) {
        def newJob = null
        def configFile = null
        def numJobs = 0

        this.inf("display name src branch: ${this.displayNameSrcBranch}")
        this.inf("display name new branch: ${this.displayNameNewBranch}")
        this.inf("job name src branch: ${this.jobNameReplace}")
        this.inf("job name new branch: ${this.newBranch}")

        for(job in this.jobsList) {
            try {
                newJob = this.copyJob(job)
                if(!this.debug) {
                    newJob.save()
                    this.updateWorkspace(newJob)
                    if(this.fromTrunk && rmPublishers) {
                        this.removePublishers(newJob)
                    }
                    configFile = this.updateJobConfig(job, newJob)
                    this.copyPromotions(job, newJob)
                    this.removePromotion(job)
                    this.reloadJobConfig(newJob, configFile)
                }
                numJobs++
                this.inf("copied job nr. $numJobs")
            } catch(Exception e) {
                this.warn(e)
            }
        }
        this.inf("$numJobs jobs were copied.")
    }
}


/**
 * Class which can copy and configure jobs for a new LRC branch. 
 */
class CreateBranchLRC extends CreateBranch {

    CreateBranchLRC(srcBranch, newBranch, debug, comment, activateRootJobs, env, out, devBranch) {
        super(srcBranch, newBranch, debug, comment, activateRootJobs, env, out, devBranch, false)

        this.srcBranch = "LRC_${this.srcBranch}"
        this.newBranch = "LRC_${this.newBranch}"
        this.trunkView = "LRC"
        this.displayNameSrcBranch = this.srcBranch.replaceFirst("_", " ")
        this.displayNameNewBranch = this.newBranch.replaceFirst("_", " ")
        this.pkgPoolReplace = "*/LRC"

        if(this.fromTrunk) {
            this.jobNameReplace = "LRC"
        } else {
            this.jobNameReplace = this.srcBranch
            //this.trunkView = this.srcBranch
            this.pkgPoolReplace = "*/${this.srcBranch}"
        }
    }

    void main() {
        this.getSrcBranchView()
        this.collectJobs()
        this.copyJobs(false)
        this.activateJobs()
    }

    /**
     * Update config.xml of newJob.
     * Return altered config.xml file
     */
    File updateJobConfig(job, newJob) {
        def configXMLFile = newJob.getConfigFile();
        def configFile = configXMLFile.getFile();

        // The jobs triggerd by the root build job have 2x "_-_LRC_-_" in its name
        if(job.getName() == this.env.get("MAIN_BUILD_JOB_NAME_LRC")) {
            this.inf("replace LFS_CI_-_${this.jobNameReplace}_-_ by LFS_CI_-_${this.newBranch}_-_ in ${newJob.name} config.xml.")
            processFileInplace(configFile) { text ->
                text.replaceAll("LFS_CI_-_"+this.jobNameReplace+"_-_", "LFS_CI_-_"+this.newBranch+"_-_")
            }
        } else {
            this.inf("replace -_${this.jobNameReplace}_- by -_${this.newBranch}_- in ${newJob.name} config.xml.")
            processFileInplace(configFile) { text ->
                text.replaceAll("-_"+this.jobNameReplace+"_-", "-_"+this.newBranch+"_-")
            }
        }

        if(newJob.getName() == "PKGPOOL_-_"+this.newBranch+"_-_Build") {
            this.inf("replace ${this.pkgPoolReplace} by */${this.newBranch} in jobs config.xml.")
            processFileInplace(configFile) { text ->
                text.replace(this.pkgPoolReplace, "*/"+this.newBranch)
            }
        }

        this.inf("updated job configuration for job \"$newJob.name\"")
        return configFile
    }
}


/**
 * Class which can create a sectioned view and add list view sections 
 * to it. Can also create the list view within the SCM view for LRC.
 */
class CreateViews extends Common {

    def lrc
    def jenkinsUrl
    def apiToken
    def apiUser
    def ciRoot
    def tmplDir
    def tmplSuffix
    def workspace
    def scmViewLRC

    /**
     * Constructor
     *
     * @param srcBranch name of the branch (eg. trunk).
     * @param newBranch name of the nes branch (eg. FB1408).
     * @param lrc true in case of LRC false otherwise.
     * @param debug true debug mode false otherwise
     * @param env some variables are shipped via this hash table 
     * @param out the output stream so that this.out.println() works.
     * @param devBranch true if this is a development branch, false otherwise
     * @param fsmr4 true if fsmr4 is needed, false otherwise
     */
    CreateViews(srcBranch, newBranch, lrc, debug, env, out, devBranch, fsmr4) {
        super(srcBranch, newBranch, debug, env, out, devBranch, fsmr4)
        this.lrc = lrc
        this.jenkinsUrl = env.get("JENKINS_URL")
        this.apiToken = env.get("JENKINS_API_TOKEN")
        this.apiUser = env.get("JENKINS_API_USER")
        this.ciRoot = env.get("LFS_CI_ROOT")
        this.tmplDir = env.get("TEMPLATE_DIR")
        this.tmplSuffix = env.get("TEMPLATE_SUFFIX")
        this.workspace = env.get("WORKSPACE")
        this.scmViewLRC = "SCM_LRC"

        if(this.lrc) {
            this.srcBranch = "LRC_" + this.srcBranch
            this.newBranch = "LRC_${this.newBranch}"
            this.trunkView = "LRC"
            if(!this.fromTrunk) {
                this.trunkView = this.srcBranch
            }
        }
    }

    /**
     * Here we go.
     */
    void main() {
        def parentViewObj = this.createNestedView()
        this.addSectionedView(parentViewObj)
        this.createScmView()
    }

    /**
     * Configure SCM view for LRC.
     */
    void configureScmView() {
        def requestUrl = "${this.jenkinsUrl}view/${this.scmViewLRC}/view/${this.newBranch}/config.xml"
        def proc = null
        def configXmlFile = "${workspace}/list_view_template.xml"
        def config = null

        this.inf("get view config from: ${requestUrl}")
        proc = ["curl", "-k", "${requestUrl}", "--noproxy", "localhost"].execute()
        proc.waitFor()
        config = proc.text

        def listViewTmpl = new File(configXmlFile)
        this.inf("write config xml file to ${configXmlFile}")
        listViewTmpl.write(config)

        this.processFileInplace(listViewTmpl) { text ->
            text.replace("</hudson.model.ListView>", "  <includeRegex>.*_-_${this.newBranch}_-_.*</includeRegex>\n</hudson.model.ListView>")
        }

        if(this.debug) {
            this.dbg("send config xml file ${configXmlFile} to Jenkins")
            this.dbg("     -> ${requestUrl}")
        } else {
            this.inf("send config xml file ${configXmlFile} to Jenkins")
            this.inf("     -> ${requestUrl}")
            proc = ["curl", "-k", "-u${this.apiUser}:${this.apiToken}", "${requestUrl}", "--noproxy", "localhost", "--data-binary", "@${configXmlFile}"].execute()
            this.inf("waiting for response from Jenkins")
            proc.waitFor()
            this.inf("configureScmView() proc.text: $proc.text")
        }
        this.inf("finished configuring SCM list view")
    }

    /**
     * Create SCM view for LRC.
     */
    void createScmView() {
        if(this.lrc) {
            this.out.println("\n[INFO] creating SCM_LRC view.")
            if(this.debug) {
                this.dbg("create view ${this.newBranch} within ${this.scmViewLRC}.")
            } else {
                def scmViewLRCObj = Jenkins.instance.getView(this.scmViewLRC)
                def scmBranchViewObj = new ListView(this.newBranch, scmViewLRCObj)
                scmViewLRCObj.addView(scmBranchViewObj)
                this.inf("created view ${this.newBranch} within ${this.scmViewLRC}.")
            }
            this.configureScmView()
        } else {
            this.inf("SCM view is used for LRC only.")
        }
    }

    /**
     * Create the nested view (the root view) for the new branch.
     * The name of the view is this.rootView. Returns the created
     * nested view. If the view already exists, this one is returned.
     * A root view for instance is "1504".
     *
     * @return - an instance of hudson.plugins.nested_view.NestedView
     */
    hudson.plugins.nested_view.NestedView createNestedView() {
        def nestedView = Jenkins.instance.getView(this.rootView)
        if(nestedView) {
            this.inf("root view ${this.rootView} already exists.")
        } else {
            if(this.debug) {
                this.dbg("create nested view ${this.rootView}")
                // Return dummy view to prevent NullPointerException
                nestedView = new hudson.plugins.nested_view.NestedView("dummy")
            } else {
                nestedView = new hudson.plugins.nested_view.NestedView(this.rootView)
                Jenkins.instance.addView(nestedView)
                this.inf("created view ${this.rootView}")
            }
        }
        return nestedView
    }

    /** 
     * Create the sectioned view for the new branch within parentView.
     * A sectioned view for instance is FB1405 or FB1405_LN70P8.
     *
     * @param parentView The view instance which is the parent.
     */
    void addSectionedView(parentView) {
        this.out.println("\n[INFO] creating sectioned view.")
        if(this.debug) {
            this.dbg("Create sectioned view for ${this.newBranch}")
        } else {
            def sectionedView = parentView.getView(this.newBranch)
            if(sectionedView) {
                this.inf("view ${parentView.name}/${this.newBranch} already exists.")
            } else {
                sectionedView = new SectionedView(this.newBranch)
                sectionedView.owner = parentView
                parentView.addView(sectionedView)
                this.inf("created view ${parentView.name}/${this.newBranch}")
            }
            this.configureSectionedView()
        }
    }

    /**
      * Configure the sectioned view for this branch.
      * Reads the config.xml of the the source branch view and
      * sends an altered config.xml file to the new branch view.
      * To do so, the "curl" command must be available.
      */
    void configureSectionedView() {
        def requestUrl = ""

        if(this.fromTrunk) {
            requestUrl = "${this.jenkinsUrl}view/${this.trunkView}/config.xml"
        } else if(this.lrc) {
            requestUrl = "${this.jenkinsUrl}view/${this.rootView}/view/${this.trunkView}/config.xml"
        } else {
            requestUrl = "${this.jenkinsUrl}view/${this.rootView}/view/${this.srcBranch}/config.xml"
        }

        def proc = null
        def configXmlFile = "${workspace}/sectioned_view_template.xml"
        def config = null

        this.inf("get view config from: ${requestUrl}")
        proc = ["curl", "-k", "${requestUrl}", "--noproxy", "localhost"].execute()
        proc.waitFor()
        config = proc.text

        def sectionedViewTmpl = new File(configXmlFile)
        this.inf("write config xml file to ${configXmlFile}")
        sectionedViewTmpl.write(config)

        if(this.fsmr4) {
            this.inf("-> replace <includeRegex>LFS_CI_-_(${this.srcBranch}|fsmr4) by <includeRegex>LFS_CI_-_(${this.newBranch}|${this.newBranch}_FSMR4)")
            this.processFileInplace(sectionedViewTmpl) { text ->
                text.replace("<includeRegex>LFS_CI_-_(${this.srcBranch}|fsmr4)", "<includeRegex>LFS_CI_-_(${this.newBranch}|${this.newBranch}_FSMR4)")
            }
        }

        if(this.fromTrunk) {
            this.inf("-> replace ${this.trunkView} by ${this.newBranch}")
            this.processFileInplace(sectionedViewTmpl) { text ->
                text.replaceAll(this.trunkView, this.newBranch)
            }
        } else {
            this.inf("-> replace ${this.srcBranch} by ${this.newBranch}")
            this.processFileInplace(sectionedViewTmpl) { text ->
                text.replaceAll(this.srcBranch, this.newBranch)
            }
        }

        // requestUrl for posting the config to the new view.
        requestUrl = "${this.jenkinsUrl}view/${this.rootView}/view/${this.newBranch}/config.xml"

        if(this.debug) {
            this.dbg("send config xml file ${configXmlFile} to Jenkins")
            this.dbg("     -> ${requestUrl}")
        } else {
            this.inf("send config xml file ${configXmlFile} to Jenkins")
            this.inf("     -> ${requestUrl}")
            proc = ["curl", "-k", "-u${this.apiUser}:${this.apiToken}", "${requestUrl}", "--noproxy", "localhost", "--data-binary", "@${configXmlFile}"].execute()
            this.inf("waiting for response from Jenkins")
            proc.waitFor()
            this.inf("configureSectionedView() proc.text: $proc.text")
        }
        this.inf("finished configuring sectioned view")
    }
}

