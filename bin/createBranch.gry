///////////////////////////////////////////////////////////////////////////////
//
// Groovy script to crate a new branch in the LFS CI.
//
// 1. Take environment vars and parameters from Jenkins job.
// 2. Creagte a list view and name it after the new branch.
// 3. Add this new list view to the SCM view.
// 4. Copy the jobs and replace $src_branch with $new_branch
//    in the job name.
// 5. On the new job update the custom workspace if existing.
// 6. Reconfigure the new job by editing config.xml.
// 7. Copy and configure promotions if there are any.
// 8. Reload the configuration of the new job.
//
////////////////////////////////////////////////////////////////////////////////
//
// IMPORTANT:
//
// Jobs to be copied must exist within the SCM view.
// "SCM/TUNK" and "SCM_LRC/TRUNK".
// 
// Sectioned view templates are read from 
// 
// Currently works only if "trunk" is the src_branch.
///////////////////////////////////////////////////////////////////////////////

//
// TODO:
//  - Job exclude list (1. Job to be excluded: *YAFT*)
//  - Check whether all jobs are deleted if not delete it again.
//

import hudson.model.*
import jenkins.model.Jenkins
import hudson.model.ParametersAction
import hudson.model.ListView
import hudson.plugins.sectioned_view.SectionedView
import javax.xml.transform.stream.StreamSource
import java.io.File
import java.io.FileInputStream;


println("\n\nRunning script createBranch.gry\n")

def j = Jenkins.instance

def thr = Thread.currentThread()

def build = thr?.executable

src_branch = ""

new_branch = ""
  
comment = ""

copy_jobs = false

fsmr4_jobs = false

fsmr4_only = false

doJenkins = false

activateRootJobs = false

debug = true

// Environment vars
jenkinsHome = build.getEnvironment(listener).get("JENKINS_HOME")
jenkinsUrl = build.getEnvironment(listener).get("JENKINS_URL")
jenkinsApiToken = build.getEnvironment(listener).get("JENKINS_API_TOKEN")
jenkinsApiUser = build.getEnvironment(listener).get("JENKINS_API_USER")
ciRoot = build.getEnvironment(listener).get("LFS_CI_ROOT")
templateDir = build.getEnvironment(listener).get("CONFIGXML_TEMPLATE_DIR")
templateSuffix = build.getEnvironment(listener).get("CONFIGXML_TEMPLATE_SUFFIX")
workspace = build.getEnvironment(listener).get("WORKSPACE")

lrc_jobs = false
if(build.getEnvironment(listener).get("LRC") == "true") {
    lrc_jobs = true
}


// Parameters from Jenkins job
def parameters = build?.actions.find{ it instanceof ParametersAction }?.parameters
parameters.each {
    if(it.name == "NEW_BRANCH")
        new_branch = it.value
    else if(it.name == "SRC_BRANCH")
        src_branch = it.value
    else if(it.name == "FSMR4")
        fsmr4_jobs = it.value
    else if(it.name == "FSMR4_ONLY") {
        fsmr4_only = it.value
        if(fsmr4_only == true) {
            fsmr4_jobs = false
            println("[INFO] set fsmr4_jobs to false because fsmr4_only is requested.")
        }
    }
    else if(it.name == "COMMENT")
        comment = it.value
    else if(it.name == "ACTIVE_ROOT_JOBS")
        activateRootJobs = it.value
    else if(it.name == "DO_JENKINS") {
        doJenkins = it.value
    }
    else if(it.name == "DEBUG") {
        debug = it.value
        println("[INFO] got parameter DEBUG: $debug")
    }
}

if(doJenkins == false) {
    println("[INFO] DO_JENKINS: false - nothing to do.")
    return 0
}

if(!new_branch || !src_branch || !comment) {
    throw new RuntimeException("Parameter is missing")
}
if(src_branch != "trunk") {
    throw new RuntimeException("Parameter SRC_BRANCH must be \"trunk\"")
}

println("[INFO] lrc_jobs: $lrc_jobs")
println("[INFO] fsmr4_jobs: $fsmr4_jobs")
println("[INFO] fsmr4_only: $fsmr4_only")


// Add branch list view to SCM view.
def createScmView() {
    def scm_view = "SCM"
    def scm_view_obj = null
    def branch_view_name = new_branch
    def new_branch_view_obj = null

    if(lrc_jobs) {
        scm_view = "SCM_LRC"
        branch_view_name = "LRC_" + new_branch
    }

    scm_view_obj = Jenkins.instance.getView(scm_view)

    src_branch_view_obj = scm_view_obj.getView(src_branch.toUpperCase())
    new_branch_view_obj = scm_view_obj.getView(branch_view_name)

    if(new_branch_view_obj) {
        println("[INFO] view $branch_view_name already exists.")
    }
    else {
        if(debug) {
            println("[DEBUG] Adding view $branch_view_name to $scm_view view")
        } else {
            println("[INFO] Adding view $branch_view_name to $scm_view view")
            new_branch_view_obj = new ListView(branch_view_name, scm_view_obj)
            scm_view_obj.addView(new_branch_view_obj)
        }
    }

    return new_branch_view_obj
}

def processFileInplace(file, Closure processText) {
    def text = file.text
    file.write(processText(text))
}

jobs_to_enable = []
def copyJob(job) {
    def new_name = ""
    def new_job = null
    if(!debug) {
        if(job.getName().find("fsmr4") && (fsmr4_jobs || fsmr4_only)) {
            new_name = job.getName().replaceFirst("-_fsmr4_-", "-_"+new_branch+"_FSMR4_-")
            new_job = Jenkins.instance.copy(job, new_name)
            new_job.setDisplayName(job.getDisplayName().replaceFirst("- "+src_branch+" -", "- "+new_branch+" -"))
        } else if(job.getName().find("LRC") && lrc_jobs) {
            new_name = job.getName().replaceFirst("-_LRC_-", "-_LRC_"+new_branch+"_-")
            new_job = Jenkins.instance.copy(job, new_name)
            if(job.getDisplayName().startsWith("LFS CI - LRC "+src_branch+" -")) {
                new_job.setDisplayName(job.getDisplayName().replaceFirst("- LRC "+src_branch+" -", "- LRC "+new_branch+" -"))
            } else if(job.getDisplayName().startsWith("LFS Production - LRC - ")) {
                new_job.setDisplayName(job.getDisplayName().replaceFirst("- LRC -", "- LRC "+new_branch+" -"))
            }
        } else if(!lrc_jobs) {
            new_name = job.getName().replaceFirst("-_"+src_branch+"_-", "-_"+new_branch+"_-")
            new_job = Jenkins.instance.copy(job, new_name)
            new_job.setDisplayName(job.getDisplayName().replaceFirst(src_branch, new_branch))
        }
        if(new_name == "LFS_CI_-_${new_branch}_-_Build" || new_name == "LFS_CI_-_LRC_${new_branch}_-_Build" || new_name == "PKGPOOL_-_${new_branch}_-_Build" || new_name == "PKGPOOL_-_LRC_${new_branch}_-_Build") {
            new_job.setDescription("Comment: ${comment}")
            println("[INFO] set description for job \"$new_name\"")
            // disable build jobs because not all jobs are created jet.
            new_job.disable()
            println("[INFO] disabled job \"$new_job.name\"")
            jobs_to_enable.add(new_job)
        }
        println("[INFO] copied job \"$job.name\" -> \"$new_name\"")
        return new_job
    } else {
        println("[DEBUG] copy job \"$job.name\"")
    }
}

def disableJob(job) {
    if(job.getName().find("ECL")) {
        println("[INFO] Disable job $job.name")
        job.disable()
    }
}

def updateWorkspace(job) {
    AbstractProject project = job
    def new_workspace = project.getCustomWorkspace()
    if(new_workspace) {
        new_workspace.replace(src_branch, new_branch)
        project.setCustomWorkspace(new_workspace)
        project.save()
    }
}

def updateJobConfig(job, new_job) {
    def configXMLFile = new_job.getConfigFile();
    def config_file = configXMLFile.getFile();
    if(job.getName().find("fsmr4") && (fsmr4_jobs || fsmr4_only)) {
        processFileInplace(config_file) { text ->
            text.replaceAll("-_fsmr4_-", "-_"+new_branch+"_FSMR4_-")
        }
    } else if(job.getName().find("LRC") && lrc_jobs) {
        processFileInplace(config_file) { text ->
            text.replaceAll("LFS_CI_-_LRC_-", "LFS_CI_-_LRC_"+new_branch+"_-")
        }
        processFileInplace(config_file) { text ->
            text.replaceAll("LFS_Prod_-_LRC_-", "LFS_Prod_-_LRC_"+new_branch+"_-")
        }
        processFileInplace(config_file) { text ->
            text.replaceAll("PKGPOOL_-_LRC_-", "PKGPOOL_-_LRC_"+new_branch+"_-")
        }
    } else if(!lrc_jobs) {
        processFileInplace(config_file) { text ->
            text.replaceAll("-_"+src_branch+"_-", "-_"+new_branch+"_-")
        }
        if(new_job.getName().find("LFS_CI_-_"+new_branch+"_-_Build")) {
            processFileInplace(config_file) { text ->
                text.replaceAll("LFS_CI_-_fsmr4_", "LFS_CI_-_"+new_branch+"_FSMR4_")
            }
        }
    }

    if(new_job.getName() == "PKGPOOL_-_"+new_branch+"_-_Build") {
        if (src_branch == "trunk") {
            processFileInplace(config_file) { text ->
                text.replace("*/master", "*/"+new_branch)
            }
        } else {
            processFileInplace(config_file) { text ->
                text.replace("*/${src_branch}", "*/"+new_branch)
            }
        }
    }

    println("[INFO] updated job configuration for job \"$new_job.name\"")
    return config_file
}

def reloadJobConfig(job, config_file) {
    InputStream is = new FileInputStream(config_file);
    job.updateByXml(new StreamSource(is));
    job.save();
    println("[INFO] reloaded config for job \"$job.name\"")
}

def copyPromotions(job, new_job) {
    def promoSrcDir = new File("${jenkinsHome}/jobs/${job.name}/promotions")
    def promoDstDir = new File("${jenkinsHome}/jobs/${new_job.name}/promotions")
    for(property in job.getAllProperties()) {
        if(property.getClass() == hudson.plugins.promoted_builds.JobPropertyImpl) {
            println("[INFO] Job \"$job.name\" has promotions.")
            for(action in property.getJobActions())  {
                for(process in action.getProcesses()) {
                    if(process.getClass() == hudson.plugins.promoted_builds.PromotionProcess) {
                        new File(promoDstDir.getAbsolutePath()+"/"+process.getName()).mkdirs()
                        builder = new AntBuilder()
                        builder.sequential {
                            copy(tofile: promoDstDir.getAbsolutePath()+"/"+process.getName()+"/config.xml",
                                 file:   promoSrcDir.getAbsolutePath()+"/"+process.getName()+"/config.xml",
                                 overwrite: true)
                        } 
                        def dstFile = new File(promoDstDir.getAbsolutePath()+"/"+process.getName()+"/config.xml")
                        println("[INFO] configuring file "+dstFile.getAbsolutePath())
                        if(job.getName().find("fsmr4") && (fsmr4_jobs|| fsmr4_only)) {
                            processFileInplace(dstFile) { text ->
                                text.replaceAll("-_"+src_branch+"_-", "-_"+new_branch+"_-")
                            }
                        } else if(job.getName().find("LRC") && lrc_jobs) {
                            processFileInplace(dstFile) { text ->
                                text.replaceAll("LFS_CI_-_LRC_-", "LFS_CI_-_LRC_"+new_branch+"_-")
                            }
                        } else if(!lrc_jobs) {
                            processFileInplace(dstFile) { text ->
                                text.replaceAll("-_"+src_branch+"_-", "-_"+new_branch+"_-")
                            }
                        }
                    }
                }
            }
        }
    }
}

///////////////////////////////////////////////////////////////////////
//
// HERE WE GO
//
///////////////////////////////////////////////////////////////////////

try {
    new_branch_view_obj = createScmView()
}
catch(NullPointerException) {
    println("[INFO] NullPointerException OK in case DEBUG == true")
}

// collect jobs to be created
def jobs_list = []
for(job in src_branch_view_obj.getItems()) {
    if(job.getName().find(src_branch) && !lrc_jobs) {
        // fsm is requested
        jobs_list.add(job)
    } else if(fsmr4_jobs && !fsmr4_only && job.getName().find("fsmr4")) {
        // fsmr4 is also requested
        jobs_list.add(job)
    } else if(fsmr4_only && !job.getName().find("FSM-r2") && !job.getName().find("FSM-r3")) {
        // only fsmr4 is requested (fsm jobs are not needed)
        jobs_list.add(job)
    } else if(lrc_jobs && job.getName().find("LRC")) {
        // LRC is requested
        jobs_list.add(job)
    }
}

for(job in jobs_list) {
    //if(job.name == "LFS_CI_-_${src_branch}_-_Build") {
    //if(job.name == "LFS_CI_-_${src_branch}_-_Test" || job.name == "LFS_Prod_-_trunk_-_Releasing_-_summary" || job.name == "LFS_CI_-_LRC_-_Build" || job.name == "LFS_Prod_-_LRC_-_Releasing_-_summary") {
    //if(job.name == "LFS_CI_-_${src_branch}_-_Build" || job.name == "LFS_CI_-_${src_branch}_-_Test" || job.name == "LFS_Prod_-_trunk_-_Releasing_-_summary") {
    //if(job.name == "LFS_CI_-_${src_branch}_-_Build" || job.name == "LFS_CI_-_${src_branch}_-_Test" || job.name == "LFS_Prod_-_trunk_-_Releasing_-_summary" || job.name.find("fsmr4")) {
    //if(job.name.find("LRC")) {
    //if(job.name.find("fsmr4")) {
    //if(job.name == "PKGPOOL_-_trunk_-_Build") {
    def new_job = copyJob(job)
    if(!debug) {
        new_job.save()
        disableJob(new_job)
        // avoid having two projects point to the same location
        updateWorkspace(new_job)
        def config_file = updateJobConfig(job, new_job)
        copyPromotions(job, new_job)
        reloadJobConfig(new_job, config_file)
        new_branch_view_obj.doAddJobToView(new_job.getName())
        println("[INFO] added job $new_job.name to view \"$new_branch_view_obj.name\"")
    }
    //}
}

// enable previosly disabled jobs
if(activateRootJobs) {
    for(disabled_job in jobs_to_enable) {
        if(debug) {
            println("[DEBUG] enable job \"$disabled_job.name\"")
        } else {
            println("[INFO] enable job \"$disabled_job.name\"")
            disabled_job.enable()
        }
    }
} else {
    println("[INFO] not enabling before disabled jobs")
}

env = new HashMap()
env.put("JENKINS_HOME", jenkinsHome)
env.put("JENKINS_URL", jenkinsUrl)
env.put("JENKINS_API_TOKEN", jenkinsApiToken)
env.put("JENKINS_API_USER", jenkinsApiUser)
env.put("LFS_CI_ROOT", ciRoot)
env.put("TEMPLATE_DIR", templateDir)
env.put("TEMPLATE_SUFFIX", templateSuffix)
env.put("WORKSPACE", workspace)

def config = new HashMap()
def bindings = getBinding()
config.putAll(bindings.getVariables())
def out = config['out']

sectionedView = new MySectionedView(new_branch, lrc_jobs, env, out)
if(!debug) {
    //sectionedView.createNestedView()
    //sectionedView.addSectionedView()
    sectionedView.configureSectionedView()
}

///////////////////////////////////////////////////////////////////////
//
// CLASSES
//
// In groovy the output stream must be provided to a class
// explicitly. Here we call it "out".
///////////////////////////////////////////////////////////////////////


/**
 * Class that can create a sectioned view and add list view sections 
 * to it.
 */
class MySectionedView {

    def env
    def branch
    def lrc
    def jenkinsUrl
    def apiToken
    def apiUser
    def ciRoot
    def tmplDir
    def tmplSuffix
    def workspace
    def out

    def branchNestedView
    def branchType

    /**
     * Constructor
     *
     * @param branch Name of the branch (eg. FB1408).
     * @param lrc true in case of LRC false otherwise.
     * @param jenkinsUrl the Jenkins URL (eg. http://jenkins-server:8090/).
     * @param apiToken the Jenkins API token.
     * @param apiUser the Jenkins API user.
     * @param out the output stream so that this.out.println("...") works.
     */
    MySectionedView(branch, lrc, env, out) {
        this.branch = branch
        this.lrc = lrc
        this.env = env
        this.jenkinsUrl = env.get("JENKINS_URL")
        this.apiToken = env.get("JENKINS_API_TOKEN")
        this.apiUser = env.get("JENKINS_API_USER")
        this.ciRoot = env.get("LFS_CI_ROOT")
        this.tmplDir = env.get("TEMPLATE_DIR")
        this.tmplSuffix = env.get("TEMPLATE_SUFFIX")
        this.workspace = env.get("WORKSPACE")
        this.out = out

        if(this.branch[0..1] == "FB") {
            this.branchType = "FB"
            this.branchNestedView = this.branch[2..-1]
        } else if(this.branch[0..1] == "MD") {
            this.branchType = "MD"
            this.branchNestedView = this.branch[3..-1]
        } else {
            throw Exception("Invalid branch name: ${this.branch}")
        }

        if(this.lrc) {
            this.branch = "LRC_${this.branch}"
            this.branchType = "LRC_${this.branchType}"
        }

    }   
    
    /**
     * Create the nested view for the branch.
     */
    void createNestedView() {
        if(Jenkins.instance.getView(this.branchNestedView)) {
            this.out.println("[INFO] view ${this.branchNestedView} already exists.")
        } else {
            Jenkins.instance.addView(new hudson.plugins.nested_view.NestedView(this.branchNestedView))
            this.out.println("[INFO] Created view ${this.branchNestedView}")
        }
    }

    /** 
     * Create the sectioned view for this.branch.
     * TODO: Not working: sectioned view is added to the root view.
     */
    void addSectionedView() {
        def parent_view = this.branchNestedView
        def parent_view_obj = null
        def branchSectionedViewObj = null

        if(branchNestedViewObj) {
            this.out.println("[INFO] view ${this.branchNestedView} already exists.")
        } else {
            parent_view_obj = Jenkins.instance.getView(parent_view)
            branchSectionedViewObj = new SectionedView(this.branch)
            parent_view_obj.addView(branchSectionedViewObj)
            this.out.println("[INFO] Created view ${parent_view}/${this.branch}")
        }   
    }   
    
    void processFileInplace(file, Closure processText) {
        def text = file.text
        file.write(processText(text))
    }

    /**
      * Confiure the sectioned view for this branch by sending a config.xml
      * file to Jenkins via the Jenkins HTTP API.
      */
    void configureSectionedView() {
        this.out.println()
        def requestUrl = "${this.jenkinsUrl}view/${this.branchNestedView}/view/${this.branch}/config.xml"
        def xmlTemplate = null
        def configurationFile = null
        def proc = null
        def configXmlFile = "${workspace}/sectioned_view_template.xml"

        this.out.println("[INFO] configure sectioned view")
        this.out.println("[INFO] read ${this.tmplDir}/${this.branchType}${this.tmplSuffix}")
        def tmplString = new File("${this.tmplDir}/${this.branchType}${this.tmplSuffix}").text
        def sectionedViewTmpl = new File(configXmlFile)
        this.out.println("[INFO] write config xml file to ${configXmlFile}")
        sectionedViewTmpl.write(tmplString)

        this.processFileInplace(sectionedViewTmpl) { text ->
            text.replaceAll("##BRANCH##", this.branch)
        }

        this.out.println("[INFO] send config xml file ${configXmlFile} to Jenkins")
        proc = ["curl", "-u${this.apiUser}:${this.apiToken}", "${requestUrl}", "--noproxy", "localhost", "--data-binary", "@${workspace}/sectioned_view_template.xml"].execute()
        proc.waitFor()
        this.out.println("[INFO] configureSectionedView() proc.text: $proc.text")
    }
}

