/**
 *
 * Groovy script to delete a branch in the LFS CI.
 *
 * 1. Take the parameters from the Jenkins job.
 * 2. Check which jobs shall be deleted.
 * 3. Delete the jobs.
 * 4. If no branch left also delete the YYMM root-view.
 */

// TODO: Delete branches in view "DEV"

println("\n\nRunning script deleteBranch.gry\n")

import jenkins.model.Jenkins
import hudson.model.ParametersAction


j = Jenkins.instance

def thr = Thread.currentThread()

def build = thr?.executable

def parameters = build?.actions.find{ it instanceof ParametersAction }?.parameters

branch = ""

deleteJobs = false

LRC_deleteJobs = false

debug = true

lrc_jobs = []

remaining_jobs = []

dev_branch = false

parameters.each {
    if(it.name == "BRANCH") {
        branch = it.value
        if(branch) {
            println("[INFO] got parameter BRANCH:  " + branch)
        } else {
            throw new RuntimeException("BRANCH is not specified")
        }
        if(branch.startsWith("LRC_")) {
            branch = branch[4..-1]
        }
    }
    if(it.name == "DELETE_JOBS") {
        deleteJobs = it.value
        println("[INFO] got parameter DELETE_JOBS: $deleteJobs")
    }
    if(it.name == "LRC_DELETE_JOBS") {
        LRC_deleteJobs = it.value
        println("[INFO] got parameter LRC_DELETE_JOBS: $LRC_deleteJobs")
    }
    if(it.name == "DEVELOPER_BRANCH") {
        dev_branch = it.value
        println("[INFO] got parameter DEVELOPER_BRANCH: $dev_branch")
    }
    if(it.name == "DEBUG") {
        debug = it.value
        println("[INFO] got parameter DEBUG: $debug")
    }
}

if(!deleteJobs && !LRC_deleteJobs) {
    println("[INFO] Nothing should be deleted.")
    return 0
}

jenkins_jobs_dir = build.getEnvironment(listener).get("JENKINS_JOBS_DIR")

///////////////////////////////////////////////////////////////////////
//
// Here we go
//
///////////////////////////////////////////////////////////////////////

/**
 * Return name of the root view (eg 1405).
 */
def getRootView() {
    def root_view = branch[2..-1]

    if(branch[0..1] == "MD") {
        root_view = branch[3..-1]
    }

    if(dev_branch) {
        root_view = "DEV"
    }

    if(root_view.find("_")) {
        root_view = root_view.split("_")[0]
    }

    return root_view
}

/**
 * Return the name of the branch view (eg FB1405).
 */
def getBranchView() {
    def branch_view = branch
    if(LRC_deleteJobs) {
        branch_view = "LRC_" + branch
    }
    return branch_view
}

/**
 * Delete the branch view within the SCM view.
 * LRC only.
 */
def deleteScmView() {
    def scm_view = "SCM"
    def branch_view = getBranchView()
    def scm_view_obj = null
    def branch_view_obj = null

    if(LRC_deleteJobs) {
        scm_view = "SCM_LRC"
    } else {
        return
    }

    scm_view_obj = j.getView(scm_view)
    branch_view_obj = scm_view_obj.getView(branch_view)

    if(debug) {
        println("[DEBUG] delete view: ${branch_view} in ${scm_view} (dry run)")
    } else {
        scm_view_obj.deleteView(branch_view_obj)
        println("[INFO] deleted view: ${branch_view} in ${scm_view} view")
    }
}

/**
 * Delete the "branch view" eg. 1405/FB1405.
 */
def deleteBranchView() {
    def root_view = getRootView()
    def branch_view = getBranchView()
    if(debug) {
        println("[DEBUG] delete branch view: $root_view/$branch_view (dry run)")
    } else {
        try {
            rootViewObj = j.getView(root_view)
            branch_view_obj = rootViewObj.getView(branch_view)
            rootViewObj.deleteView(branch_view_obj)
            println("[INFO] deleted branch view: $root_view/$branch_view")
        } catch(e) {
            println("[ERROR] deleteBranchView(): " + e)
        }
    }
}

/**
 * Delete the "root view" eg. 1405.
 */
def deleteRootView() {
    def root_view = getRootView()
    root_view_obj = j.getView(root_view)
    if(debug) {
        if(!root_view_obj.getAllItems()) {
            println("[DEBUG] delete root view: $root_view (dry run)")
        } else {
            println("[DEBUG] Not deleting root view $root_view. There are still related jobs.")
        }
    } else {
        try {
            if(!root_view_obj.getAllItems()) {
                vo = root_view_obj.getOwner()
                vo.deleteView(root_view_obj)
                println("[INFO] deleted root view: $root_view")
            } else {
                println("[INFO] Not deleting root view $root_view. There are still jobs from another branch.")
            }
        } catch(e) {
            println("[ERROR] deleteRootView(): " + e)
        }
    }
}

def postChecks() {
    println("\n[INFO] run post checks.")

    try {
        for(jobName in deletedJobs) {
            println("[INFO] check whether job $jobName has been deleted.")
            job = j.getItem(jobName)
            if(job) {
                println("[INFO] job ${job.name} has not been deleted. Trying to delete again.")
                job.delete()
            }
            jobDir = new File("${jenkins_jobs_dir}/${jobName}")
            println("[INFO] check whether job dir $jobDir has been deleted.")
            if(jobDir.exists()) {
                println("[INFO] job dir ${jobDir} has not been deleted. Trying to delete.")
                jobDir.deleteDir()
            }
        }
    } catch(Exception e) { 
        println("[WARNING] " + e)
    }
}

// Delete none LRC jobs and collect LRC jobs in a list.
deletedJobs = []
def deleteJobs() {
    if(deleteJobs || LRC_deleteJobs) {
        for(p in j.getProjects()) {
            def job_name = p.getName()
            if(deleteJobs && job_name.find("_"+branch+"_") && !job_name.find("LFS_CI_-_LRC_") && !job_name.find("LFS_Prod_-_LRC_") && !job_name.find("PKGPOOL_-_LRC_")) {
                if(debug) {
                    println("[DEBUG] delete job: $job_name (dry run)")
                } else {
                    deletedJobs.add(job_name)
                    try {
                        p.delete()
                        println("[INFO] deleted job: $job_name")
                    } catch(e) {
                        println("[WARNING] failed deleting job $job_name.")
                    }
                }
            } else if(job_name.find("LFS_CI_-_LRC_"+branch+"_-") || job_name.find("LFS_Prod_-_LRC_"+branch+"_-") || job_name.find("PKGPOOL_-_LRC_"+branch+"_-")) {
                lrc_jobs.add(p)
                println("[DEBUG] added job $job_name to lrc_jobs list")
            }
        }
    }
}

// Delete LRC jobs.
def deleteLRCJobs() {
    if(LRC_deleteJobs && lrc_jobs) {
        for(p in lrc_jobs) {
            if(debug) {
                println("[DEBUG] delete LRC job: $p.name (dry run)")
            } else {
                deletedJobs.add(p.getName())
                try {
                    p.delete()
                    println("[INFO] deleted LRC job: $p.name")
                } catch(e) {
                    println("[WARNING] failed deleting job ${p.name}.")
                }
            }
        }
    }
}

deleteJobs()
deleteLRCJobs()
deleteScmView()
deleteBranchView()
deleteRootView()
println("\n[INFO] finished deleting branch. Starting post checks.")
postChecks()
