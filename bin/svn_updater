#!/usr/bin/env perl

# TODO: demx2fk3 2014-04-14 add comments here
# TODO: demx2fk3 2014-04-14 add documentation here
# TODO: demx2fk3 2014-04-14 who is responsible for this script?
# TODO: demx2fk3 2014-04-14 add input validation

use strict;
use warnings;

use File::Find;
use File::Compare;

# our globals....
my $FROM = shift( @ARGV );
my $TO   = shift( @ARGV );

# TODO: demx2fk3 2014-04-14 arghs.. @FROM and %FROM is in use...
my @FROM = ();
my %FROM = ();

# TODO: demx2fk3 2014-04-14 f*** $to, $TO, %TO, @TO and TO: is in use...
my @TO = ();
my %TO = ();

sub fromwanted {
    my $name = $File::Find::name;
    return if $name eq $FROM;

    $name = substr( $name, length( $FROM ) + 1 );
    if( "/$name" =~ /\/\.svn/ ) {
        $File::Find::prune = 1;
        return;
    }
    push @FROM, $name;

    if( -l $_ ) {
        $FROM{$name} = "link";
    }
    elsif( -f $_ ) {
        if( -x _ ) {
            $FROM{$name} = "exe";
        }
        else {
            $FROM{$name} = "file";
        }
    }
    elsif( -d $_ ) {
        $FROM{$name} = "dir";
    }
    else {
        die "$File::Find::name: not a link or file or dir\n";
    }
}


sub towanted {
    my $name = $File::Find::name;
    return if $name eq $TO;

    if( "/$name" =~ /\/\.svn/ ) {
        $File::Find::prune = 1;
        return;
    }
    $name = substr( $name, length( $TO ) + 1 );
    push @TO, $name;

    if( -l $_ ) {
        $TO{$name} = "link";
    }
    elsif( -f $_ ) {
        if( -x _ ) {
            $TO{$name} = "exe";
        }
        else {
            $TO{$name} = "file";
        }
    }
    elsif( -d $_ ) {
        $TO{$name} = "dir";
    }
    else {
        die "$File::Find::name: not a link or file or dir\n";
    }
}

sub exetofile {
    my $type = shift;
    return ( $type eq "exe" ) ? "file" : $type;
}

sub sametype {
    my $file = shift;

    return 0 unless exists( $FROM{$file} );
    return 0 unless exists( $TO{$file} );
    return exetofile( $FROM{$file} ) eq exetofile( $TO{$file} );
}

print "# update dest\n";
print "svn update $TO\n";

find( \&fromwanted, $FROM );
finddepth( \&towanted, $TO );

print "# type changes\n";
my $typechanged = 0;
my @REMOVEDDIRS = ();
for my $to ( @TO ) {
    next if sametype( $to );
    next unless exists( $FROM{$to} );

    print "svn rm $TO/$to\n";
    if( $TO{$to} eq "dir" ) {
        push @REMOVEDDIRS, "$to/";    # including trailing / (!)
    }
    $typechanged = 1;
}

if( $typechanged ) {
    print "svn commit $TO -m 'updated branch with svn_updater NOJCHK'\n";
    print "svn update $TO\n";
}

my $modified = 0;
print "# additions\n";
for my $from ( @FROM ) {
    next if sametype( $from );

    if( $FROM{$from} eq "dir" ) {
        print "svn mkdir $TO/$from\n";
        $modified = 1;
    }
    elsif( $FROM{$from} eq "link" ) {
        my $link = readlink( "$FROM/$from" ) or die;
        print "ln -sf $link $TO/$from\n";
        print "svn add $TO/$from\n";
        $modified = 1;
    }
    else {
        print "cp -f $FROM/$from $TO/$from\n";
        print "svn add $TO/$from\n";
        $modified = 1;
    }
}

print "# removals\n";
TO:
for my $to ( @TO ) {
    next if sametype( $to );
    next if exists( $FROM{$to} );    # previously removed

    for my $dir ( @REMOVEDDIRS ) {
        next TO if $dir eq substr( $to, 0, length( $dir ) );
    }

    print "svn rm $TO/$to\n";
    $modified = 1;
}

print "# modifications\n";
for my $from ( @FROM ) {
    next unless sametype( $from );
    if( $FROM{$from} eq "dir" ) {
        next;
    }
    elsif( $FROM{$from} eq "link" ) {
        my $fromlink = readlink( "$FROM/$from" ) or die;
        my $tolink   = readlink( "$TO/$from" )   or die;
        next if $fromlink eq $tolink;
        print "rm -f $TO/$from\n";
        print "ln -sf $fromlink $TO/$from\n";
        $modified = 1;
    }
    else {
        if( compare( "$FROM/$from", "$TO/$from" ) != 0 ) {
            print "cp -f $FROM/$from $TO/$from\n";
            $modified = 1;
        }
        if( ( $FROM{$from} ) eq "file" and ( $TO{$from} eq "exe" ) ) {
            print "svn propset svn:executable yes $TO/$from\n";
            $modified = 1;
        }
        elsif( ( $FROM{$from} ) eq "exe" and ( $TO{$from} eq "file" ) ) {
            print "svn propdel svn:executable $TO/$from\n";
            $modified = 1;
        }
    }
}

if( $modified ) {
    # print "svn commit $TO -m 'updated branch with svn_updater NOJCHK'\n";
    # print "svn update $TO\n";
}
